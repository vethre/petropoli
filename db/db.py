from datetime import datetime, timezone
import json
import asyncpg
from config import DB_URL

pool: asyncpg.Pool = None

async def init_db():
    global pool
    if pool is None:
        pool = await asyncpg.create_pool(
            dsn=DB_URL, 
            command_timeout=60,
            min_size=1,
            max_size=5
        )

async def fetch_one(query: str, args: dict = None):
    async with pool.acquire() as connection:
        return await connection.fetchrow(query, *args.values() if args else ())
    
async def fetch_all(query: str, args: dict = None):
    async with pool.acquire() as connection:
        return await connection.fetch(query, *args.values() if args else ())
    
async def execute_query(query: str, args: dict = None):
    async with pool.acquire() as connection:
        return await connection.execute(query, *args.values() if args else ())
    
async def get_user_quests(uid: int):
    return await fetch_all("SELECT * FROM quests WHERE user_id = $1", {"uid": uid})

async def insert_quest(user_id: int, quest_id: str, name: str, description: str, zone: str, goal: int, reward_coins: int, reward_egg_type: str = None):
    await execute_query(
        "INSERT INTO quests (user_id, quest_id, name, description, progress, goal, reward_coins, reward_egg_type, completed, claimed, zone) "
        "VALUES ($1, $2, $3, $4, $5, $6, $7, $8, FALSE, FALSE, $9)",
        {
            "user_id": user_id,
            "quest_id": quest_id,
            "name": name,
            "description": description,
            "progress": 0, # –ù–∞—á–∏–Ω–∞–µ–º —Å 0
            "goal": goal,
            "reward_coins": reward_coins,
            "reward_egg_type": reward_egg_type,
            "zone": zone
        }
    )

async def update_quest_progress(uid: int, quest_id: str, increment: int = 1): # –ò–∑–º–µ–Ω–µ–Ω–æ quest_name –Ω–∞ quest_id
    await execute_query(
        "UPDATE quests SET progress = progress + $1 WHERE user_id = $2 AND quest_id = $3 AND completed = FALSE", # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quest_id
        {"increment": increment, "uid": uid, "quest_id": quest_id} # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quest_id
    )

async def complete_quest(uid: int, quest_id: str): # –ò–∑–º–µ–Ω–µ–Ω–æ quest_name –Ω–∞ quest_id
    await execute_query(
        "UPDATE quests SET completed = TRUE WHERE user_id = $1 AND quest_id = $2", # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quest_id
        {"uid": uid, "quest_id": quest_id} # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å quest_id
    )

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø claim_quest_reward
async def claim_quest_reward(uid: int, quest_db_id: int): # –ò–∑–º–µ–Ω–µ–Ω–æ user_id –Ω–∞ uid –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –∏ quest_id –Ω–∞ quest_db_id –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    quest_record = await fetch_one("SELECT * FROM quests WHERE id = $1 AND user_id = $2", {"id": quest_db_id, "user_id": uid})

    if not quest_record or not quest_record['completed'] or quest_record.get('claimed', False):
        return False, "–ö–≤–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –∑–∞–±—Ä–∞–Ω–∞."

    # –ú—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º QUESTS_DEFINITIONS.get(quest_record['quest_id']) –∑–¥–µ—Å—å
    # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä–∞–¥–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–∞–º–æ–π –∑–∞–ø–∏—Å–∏ –∫–≤–µ—Å—Ç–∞ –≤ –ë–î
    reward_coins = quest_record.get('reward_coins', 0)
    reward_egg_type = quest_record.get('reward_egg_type') # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–∏–ø —è–π—Ü–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ total_coins_collected (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)
    if reward_coins > 0:
        await execute_query("UPDATE users SET coins = coins + $1, total_coins_collected = total_coins_collected + $1 WHERE user_id = $2",
                            {"coins": reward_coins, "uid": uid})

    # –î–æ–±–∞–≤–ª—è–µ–º —è–π—Ü–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (eggs JSONB)
    if reward_egg_type:
        user_data = await fetch_one("SELECT eggs FROM users WHERE user_id = $1", {"uid": uid})
        eggs_list = json.loads(user_data.get('eggs', '[]') or '[]')
        eggs_list.append({"type": reward_egg_type, "timestamp": datetime.now(timezone.utc).isoformat()}) # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.now(timezone.utc)
        await execute_query("UPDATE users SET eggs = $1 WHERE user_id = $2", {"eggs": json.dumps(eggs_list), "uid": uid})
        # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ eggs_collected, —É–≤–µ–ª–∏—á—å—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:
        await execute_query("UPDATE users SET eggs_collected = eggs_collected + 1 WHERE user_id = $1", {"uid": uid})

    await execute_query("UPDATE quests SET claimed = TRUE WHERE id = $1", {"id": quest_db_id})

    msg = f"üéâ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–≤–µ—Å—Ç ¬´{quest_record['name']}¬ª –ø–æ–ª—É—á–µ–Ω–∞!" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –∑–∞–ø–∏—Å–∏ –∫–≤–µ—Å—Ç–∞
    if reward_coins > 0:
        msg += f"\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ {reward_coins} –ø–µ—Ç–∫–æ–π–Ω–æ–≤."
    if reward_egg_type:
        msg += f"\nü•ö –ü–æ–ª—É—á–µ–Ω–æ {reward_egg_type.capitalize()} —è–π—Ü–æ."

    return True, msg