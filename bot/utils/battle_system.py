# bot/utils/battle_system.py
import random
import json

def calculate_damage(attacker_atk: int, defender_def: int) -> int:
    damage = max(1, attacker_atk * attacker_atk / (attacker_atk + defender_def))
    return int(damage)

def simulate_battle_dungeon(pets_data: list, monster_info: dict) -> dict:
    
    current_pets_state = [dict(p) for p in pets_data] # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å HP

    # –í–Ω–∏–º–∞–Ω–∏–µ: team_current_hp –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
    team_current_hp = sum(p['current_hp'] for p in current_pets_state if p['current_hp'] > 0)
    team_atk = sum(p['stats']['atk'] for p in current_pets_state if p['current_hp'] > 0)
    team_def = sum(p['stats']['def'] for p in current_pets_state if p['current_hp'] > 0)


    monster_hp = monster_info['hp']
    monster_atk = monster_info['atk']
    monster_def = monster_info['def']

    current_monster_hp = monster_hp

    battle_log = [f"‚ö°Ô∏è –ù–∞—á–∞–ª–∞—Å—å –±–∏—Ç–≤–∞! –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤ <b>{monster_info['name_ru']}</b>!"]

    turns = 0
    max_turns = 100 

    while team_current_hp > 0 and current_monster_hp > 0 and turns < max_turns:
        turns += 1
        # –•–æ–¥ –∫–æ–º–∞–Ω–¥—ã –ø–∏—Ç–æ–º—Ü–µ–≤
        # –ï—Å–ª–∏ –∞—Ç–∞–∫–∞ –∫–æ–º–∞–Ω–¥—ã 0 (–≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã –º–µ—Ä—Ç–≤—ã, —á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –∫–∞–∫ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)
        if team_atk <= 0:
            battle_log.append("–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å (–≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ—é—Ç 0 –∞—Ç–∞–∫–∏).")
            break # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞

        team_damage = calculate_damage(team_atk, monster_def)
        current_monster_hp -= team_damage
        battle_log.append(f"–•–æ–¥ {turns}: –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∞—Ç–∞–∫—É–µ—Ç <b>{monster_info['name_ru']}</b>, –Ω–∞–Ω–æ—Å—è {team_damage} —É—Ä–æ–Ω–∞. –£ <b>{monster_info['name_ru']}</b> –æ—Å—Ç–∞–ª–æ—Å—å {max(0, current_monster_hp)} HP.")
        
        if current_monster_hp <= 0:
            battle_log.append(f"‚úÖ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–±–µ–¥–∏–ª–∞ <b>{monster_info['name_ru']}</b>!")
            return {
                "victory": True,
                "xp_gained": monster_info['xp_reward'],
                "coins_gained": monster_info['coin_reward'],
                "updated_pets_data": current_pets_state, 
                "battle_log": battle_log
            }
        
        # –•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
        # –ï—Å–ª–∏ –∑–∞—â–∏—Ç–∞ –∫–æ–º–∞–Ω–¥—ã 0 (–≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã –º–µ—Ä—Ç–≤—ã, —á—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
        if team_def <= 0:
             battle_log.append("–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—â–∞—Ç—å—Å—è (–≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è –∏–ª–∏ –∏–º–µ—é—Ç 0 –∑–∞—â–∏—Ç—ã).")
             break # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞

        monster_damage = calculate_damage(monster_atk, team_def)
        # –£—Ä–æ–Ω —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∂–∏–≤—ã–º –ø–∏—Ç–æ–º—Ü–∞–º
        total_live_pets_hp_before_damage = sum(p['current_hp'] for p in current_pets_state if p['current_hp'] > 0)
        
        if total_live_pets_hp_before_damage > 0:
            for pet in current_pets_state:
                if pet['current_hp'] > 0:
                    damage_to_pet = int(monster_damage * (pet['current_hp'] / total_live_pets_hp_before_damage))
                    pet['current_hp'] -= damage_to_pet
                    if pet['current_hp'] < 0:
                        pet['current_hp'] = 0 
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ HP –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞
            team_current_hp = sum(p['current_hp'] for p in current_pets_state if p['current_hp'] > 0)

            damaged_pets_log = ", ".join([f"{p['name']}: {max(0, p['current_hp'])} HP" for p in current_pets_state if p['current_hp'] > 0])
            if not damaged_pets_log: # –í—Å–µ –ø–∏—Ç–æ–º—Ü—ã –º–µ—Ä—Ç–≤—ã
                 damaged_pets_log = "–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ."
            battle_log.append(f"–•–æ–¥ {turns}: <b>{monster_info['name_ru']}</b> –∞—Ç–∞–∫—É–µ—Ç, –Ω–∞–Ω–æ—Å—è {monster_damage} —É—Ä–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–µ. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {damaged_pets_log}.")
        else:
            battle_log.append(f"–•–æ–¥ {turns}: <b>{monster_info['name_ru']}</b> –∞—Ç–∞–∫—É–µ—Ç, –Ω–æ –≤—Å–µ –ø–∏—Ç–æ–º—Ü—ã —É–∂–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è.")
            team_current_hp = 0 # –í—Å–µ –ø–∏—Ç–æ–º—Ü—ã –º–µ—Ä—Ç–≤—ã

    # –ï—Å–ª–∏ –±–æ–π –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø–æ –ª–∏–º–∏—Ç—É —Ö–æ–¥–æ–≤ –∏–ª–∏ HP –∫–æ–º–∞–Ω–¥—ã <= 0
    if team_current_hp <= 0:
        battle_log.append(f"‚ùå –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Ç–µ—Ä–ø–µ–ª–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç <b>{monster_info['name_ru']}</b>.")
        return {
            "victory": False,
            "xp_gained": 0,
            "coins_gained": 0,
            "updated_pets_data": current_pets_state,
            "battle_log": battle_log
        }
    else: # –ú–æ–Ω—Å—Ç—Ä –Ω–µ –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω –∑–∞ max_turns (—Ä–µ–¥–∫–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
        battle_log.append(f"ü§ù –ë–æ–π —Å <b>{monster_info['name_ru']}</b> –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∏—á—å–µ–π (–ª–∏–º–∏—Ç —Ö–æ–¥–æ–≤).")
        return {
            "victory": False, # –ò–ª–∏ True, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—á–∏—Ç–∞—Ç—å –Ω–∏—á—å—é –ø–æ–±–µ–¥–æ–π
            "xp_gained": 0,
            "coins_gained": 0,
            "updated_pets_data": current_pets_state,
            "battle_log": battle_log
        }