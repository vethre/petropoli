# sell.py
import json
import random
from datetime import datetime, timedelta
from math import ceil

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.db import fetch_one, fetch_all, execute_query

# Assume RARITY_ORDER is imported or defined similarly to trade.py
RARITY_ORDER = [
    "–û–±—ã—á–Ω–∞—è", "–ù–µ–æ–±—ã—á–Ω–∞—è", "–†–µ–¥–∫–∞—è", "–û—á–µ–Ω—å –†–µ–¥–∫–∞—è", "–≠–ø–∏—á–µ—Å–∫–∞—è",
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", "–î—Ä–µ–≤–Ω—è—è", "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è", "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è",
]

router = Router()

# --- NPC Buyers Configuration ---
# Each NPC has a name, description, preferred rarity, and a base price multiplier.
# The actual price will depend on the pet's rarity and this multiplier.
NPC_BUYERS = {
    "–†—ã–∂–∏–π –ë–æ–±": {
        "description": "–†—ã–∂–∏–π –ë–æ–± ‚Äî —Å—Ç–∞—Ä—ã–π –≤–æ—Ä—á–ª–∏–≤—ã–π —Å–∫—É–ø—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ü–µ–Ω–∏—Ç <b>—Ä–µ–¥–∫–∏—Ö</b> –∏ <b>–æ—á–µ–Ω—å —Ä–µ–¥–∫–∏—Ö</b> –ø–∏—Ç–æ–º—Ü–µ–≤. –û–Ω –Ω–µ –ø–ª–∞—Ç–∏—Ç –º–Ω–æ–≥–æ, –Ω–æ –±–µ—Ä–µ—Ç –ø–æ—á—Ç–∏ –≤—Å–µ—Ö.",
        "preferred_rarities": ["–û–±—ã—á–Ω–∞—è", "–ù–µ–æ–±—ã—á–Ω–∞—è", "–†–µ–¥–∫–∞—è", "–û—á–µ–Ω—å –†–µ–¥–∫–∞—è"],
        "price_multiplier": 0.7, # 70% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã —Ä–µ–¥–∫–æ—Å—Ç–∏
        "accepts_all_rarities": False, # If True, will accept any rarity at its multiplier
    },
    "–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –ö–∞—Å—Å–∞–Ω–¥—Ä–∞": {
        "description": "–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –ö–∞—Å—Å–∞–Ω–¥—Ä–∞ –∏—â–µ—Ç <b>—ç–ø–∏—á–µ—Å–∫–∏—Ö</b> –∏ <b>–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö</b> —Å—É—â–µ—Å—Ç–≤ –¥–ª—è —Å–≤–æ–∏—Ö —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤. –û–Ω–∞ –ø–ª–∞—Ç–∏—Ç –Ω–µ–ø–ª–æ—Ö–æ!",
        "preferred_rarities": ["–≠–ø–∏—á–µ—Å–∫–∞—è", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"],
        "price_multiplier": 0.9, # 90% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã —Ä–µ–¥–∫–æ—Å—Ç–∏
        "accepts_all_rarities": False,
    },
    "–ú–∞—Å—Ç–µ—Ä –õ–∞–Ω—Å": {
        "description": "–ú–∞—Å—Ç–µ—Ä –õ–∞–Ω—Å ‚Äî –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∑–æ–æ–ª–æ–≥, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ <b>–¥—Ä–µ–≤–Ω–∏—Ö</b>, <b>–±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö</b> –∏ <b>–∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö</b> –ø–∏—Ç–æ–º—Ü–µ–≤. –ì–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å —â–µ–¥—Ä–æ!",
        "preferred_rarities": ["–î—Ä–µ–≤–Ω—è—è", "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è", "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è"],
        "price_multiplier": 1.2, # 120% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã —Ä–µ–¥–∫–æ—Å—Ç–∏
        "accepts_all_rarities": False,
    },
}

# Base prices for each rarity (can be adjusted)
BASE_RARITY_PRICES = {
    "–û–±—ã—á–Ω–∞—è": 100,
    "–ù–µ–æ–±—ã—á–Ω–∞—è": 250,
    "–†–µ–¥–∫–∞—è": 500,
    "–û—á–µ–Ω—å –†–µ–¥–∫–∞—è": 1000,
    "–≠–ø–∏—á–µ—Å–∫–∞—è": 2500,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 5000,
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": 10000,
    "–î—Ä–µ–≤–Ω—è—è": 20000,
    "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è": 50000,
    "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è": 100000,
}

# Helper function to check if a pet is in a user's active arena team
async def is_pet_in_arena_team(user_id: int, pet_id: int) -> bool:
    arena_team_data = await fetch_one("SELECT pet_ids FROM arena_team WHERE user_id = $1", {"user_id": user_id})
    if arena_team_data and arena_team_data["pet_ids"]:
        active_pet_ids = json.loads(arena_team_data["pet_ids"])
        return pet_id in active_pet_ids
    return False

# --- Selling Pets ---
@router.message(Command("sell"))
async def sell_cmd(message: Message):
    uid = message.from_user.id
    args = message.text.split()

    if len(args) == 1:
        # Show list of NPC buyers
        text = "ü§ù <b>–†—ã–Ω–æ–∫ —Å–∫—É–ø—â–∏–∫–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤</b>\n\n"
        text += "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ NPC.\n"
        text += "–ö–∞–∂–¥—ã–π —Å–∫—É–ø—â–∏–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–≤–æ—é —Ü–µ–Ω—É.\n\n"

        kb = InlineKeyboardBuilder()
        for npc_name, npc_info in NPC_BUYERS.items():
            text += f"üë§ <b>{npc_name}:</b> {npc_info['description']}\n\n"
            kb.button(text=f"üëâ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å {npc_name}", callback_data=f"npc_sell:{npc_name}")
        
        kb.adjust(1)
        await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        return
    
    if len(args) == 3 and args[1].lower() == "pet":
        try:
            pet_id = int(args[2])
        except ValueError:
            await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤–æ–π ID –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", parse_mode="HTML")
            return

        # Default NPC for direct sell command (e.g., /sell pet <id>)
        # We'll use the first NPC if no specific one is chosen, or prompt to choose.
        await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–∫—É–ø—â–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/sell` –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.", parse_mode="HTML")
        return

# Callback for choosing an NPC buyer
@router.callback_query(F.data.startswith("npc_sell:"))
async def choose_npc_sell(call: CallbackQuery):
    npc_name = call.data.split(":")[1]
    uid = call.from_user.id

    if npc_name not in NPC_BUYERS:
        await call.answer("üßê –≠—Ç–æ—Ç —Å–∫—É–ø—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    npc_info = NPC_BUYERS[npc_name]

    pets = await fetch_all("SELECT * FROM pets WHERE user_id = $1", {"uid": uid})
    if not pets:
        await call.message.edit_text(
            f"üë§ <b>{npc_name}:</b> –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, —é–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –æ–±–∑–∞–≤–µ–¥—ë—à—å—Å—è –ø—É—à–∏—Å—Ç—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –Ω–∞ —Ä—ã–Ω–æ–∫", callback_data="back_to_sell_market")]
            ]),
            parse_mode="HTML"
        )
        await call.answer()
        return

    # Filter pets that this NPC accepts
    accepted_pets = [
        p for p in pets 
        if p["rarity"] in npc_info["preferred_rarities"] or npc_info["accepts_all_rarities"]
    ]

    if not accepted_pets:
        await call.message.edit_text(
            f"üë§ <b>{npc_name}:</b> –£–≤—ã, –Ω–æ –º–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã —Ç–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã... –ü—Ä–∏–Ω–æ—Å–∏ —Ç–µ—Ö, —á—Ç–æ —è –ª—é–±–ª—é!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –Ω–∞ —Ä—ã–Ω–æ–∫", callback_data="back_to_sell_market")]
            ]),
            parse_mode="HTML"
        )
        await call.answer()
        return

    text = f"üë§ <b>{npc_name}:</b> –û—Ç–ª–∏—á–Ω–æ! –ü–æ–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å.\n\n"
    text += "–Ø –≥–æ—Ç–æ–≤(–∞) –∫—É–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤:\n\n"

    kb = InlineKeyboardBuilder()
    for pet in accepted_pets:
        base_price = BASE_RARITY_PRICES.get(pet["rarity"], 0)
        final_price = int(base_price * npc_info["price_multiplier"])
        
        # Check if pet is in arena team
        is_in_arena = await is_pet_in_arena_team(uid, pet["id"])
        
        if is_in_arena:
            button_text = f"üö´ ID {pet['id']} {pet['name']} ({pet['rarity']}) ‚Äî –í –∫–æ–º–∞–Ω–¥–µ"
            kb.button(text=button_text, callback_data="noop") # Disable button
        else:
            button_text = f"üí∞ –ü—Ä–æ–¥–∞—Ç—å ID {pet['id']} {pet['name']} ({pet['rarity']}) –∑–∞ {final_price} –ü–µ—Ç–∫–æ–π–Ω–æ–≤"
            kb.button(text=button_text, callback_data=f"confirm_sell:{pet['id']}:{npc_name}")
            
    kb.adjust(1)
    kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –Ω–∞ —Ä—ã–Ω–æ–∫", callback_data="back_to_sell_market"))

    await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.startswith("confirm_sell:"))
async def confirm_sell_pet(call: CallbackQuery):
    uid = call.from_user.id
    _, pet_id_str, npc_name = call.data.split(":")
    pet_id = int(pet_id_str)

    pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": uid})
    if not pet:
        await call.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.", show_alert=True)
        await call.message.delete() # Clean up old message
        return

    if await is_pet_in_arena_team(uid, pet_id):
        await call.answer("üö´ –≠—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–∞-–∫–æ–º–∞–Ω–¥–µ. –°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏ –µ–≥–æ –æ—Ç—Ç—É–¥–∞!", show_alert=True)
        # Re-display the NPC's pet list with updated status if possible, or just inform.
        # For simplicity, we just answer the callback here.
        return

    npc_info = NPC_BUYERS.get(npc_name)
    if not npc_info:
        await call.answer("üßê –°–∫—É–ø—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # Re-check if NPC accepts this pet (in case of race condition or old button press)
    if not (pet["rarity"] in npc_info["preferred_rarities"] or npc_info["accepts_all_rarities"]):
        await call.answer(f"üö´ {npc_name} –±–æ–ª—å—à–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —ç—Ç–∏–º –ø–∏—Ç–æ–º—Ü–µ–º ({pet['rarity']}).", show_alert=True)
        return

    base_price = BASE_RARITY_PRICES.get(pet["rarity"], 0)
    final_price = int(base_price * npc_info["price_multiplier"])

    # Perform the sale
    await execute_query("DELETE FROM pets WHERE id = $1", {"id": pet_id})
    await execute_query("UPDATE users SET coins = coins + $1 WHERE user_id = $2", {"coins": final_price, "user_id": uid})

    await call.message.edit_text(
        f"üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª(–∞) <b>{pet['name']}</b> ({pet['rarity']}) <b>{npc_name}</b> –∑–∞ <b>{final_price}</b> –ü–µ—Ç–∫–æ–π–Ω–æ–≤! üí∞",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –Ω–∞ —Ä—ã–Ω–æ–∫", callback_data="back_to_sell_market")]
        ]),
        parse_mode="HTML"
    )
    await call.answer("–ü–∏—Ç–æ–º–µ—Ü –ø—Ä–æ–¥–∞–Ω!", show_alert=True)

@router.callback_query(F.data == "back_to_sell_market")
async def back_to_sell_market_callback(call: CallbackQuery):
    await sell_cmd(call.message) # Re-call the initial /sell command logic
    await call.answer()

# --- Renting Pets ---
RENT_COST_PER_DAY_MULTIPLIER = 0.05  # 5% of base rarity price per day
MAX_RENT_DAYS = 7
MIN_RENT_DAYS = 1

@router.message(Command("rent"))
async def rent_cmd(message: Message):
    uid = message.from_user.id
    args = message.text.split()

    if len(args) == 1:
        # Show user's pets available for rent
        pets = await fetch_all("SELECT * FROM pets WHERE user_id = $1 AND rented_until IS NULL", {"uid": uid})
        if not pets:
            await message.answer("ü§∑‚Äç‚ôÄÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É, –∏–ª–∏ –≤—Å–µ —Ç–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã —É–∂–µ –≤ –∞—Ä–µ–Ω–¥–µ!", parse_mode="HTML")
            return
        
        text = "ü§ù <b>–°–¥–∞—á–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∞—Ä–µ–Ω–¥—É</b>\n\n"
        text += "–¢—ã –º–æ–∂–µ—à—å —Å–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –∞—Ä–µ–Ω–¥—É –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –∏–ª–∏ NPC –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥.\n"
        text += "–í—ã–±–µ—Ä–∏ –ø–∏—Ç–æ–º—Ü–∞ –∏ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã (–¥–æ 7 –¥–Ω–µ–π).\n\n"
        text += "<b>–¢–≤–æ–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:</b>\n"

        kb = InlineKeyboardBuilder()
        for pet in pets:
            # Check if pet is in arena team
            is_in_arena = await is_pet_in_arena_team(uid, pet["id"])
            
            if is_in_arena:
                button_text = f"üö´ ID {pet['id']} {pet['name']} ({pet['rarity']}) ‚Äî –í –∫–æ–º–∞–Ω–¥–µ"
                kb.button(text=button_text, callback_data="noop") # Disable button
            else:
                text += f"üî∏ <b>ID {pet['id']}</b> ‚Äî {pet['name']} ({pet['rarity']}) | –ë–∞–∑–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {int(BASE_RARITY_PRICES.get(pet['rarity'], 0) * RENT_COST_PER_DAY_MULTIPLIER)}/–¥–µ–Ω—å\n"
                kb.button(text=f"üè° –°–¥–∞—Ç—å {pet['name']} (ID {pet['id']})", callback_data=f"rent_select_days:{pet['id']}")
        
        kb.adjust(1)
        await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
        return

    if len(args) == 3 and args[1].lower() == "cancel":
        try:
            pet_id = int(args[2])
        except ValueError:
            await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤–æ–π ID –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã.", parse_mode="HTML")
            return
        
        # Logic to cancel rent (if applicable)
        pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": uid})
        if not pet:
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return
        
        if not pet.get("rented_until"):
            await message.answer(f"üßê –ü–∏—Ç–æ–º–µ—Ü <b>{pet['name']}</b> (ID {pet['id']}) –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥–µ.", parse_mode="HTML")
            return
        
        # For now, cancelling rent means setting rented_until to NULL
        # In a more complex system, this might involve penalties or specific conditions.
        await execute_query("UPDATE pets SET rented_until = NULL WHERE id = $1", {"id": pet_id})
        await message.answer(f"üè° –ê—Ä–µ–Ω–¥–∞ –ø–∏—Ç–æ–º—Ü–∞ <b>{pet['name']}</b> (ID {pet['id']}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞! –û–Ω –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Ç–µ–±–µ.", parse_mode="HTML")
        return

    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                         "<code>/rent</code> ‚Äî –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –∞—Ä–µ–Ω–¥—ã.\n"
                         "<code>/rent cancel &lt;ID –ø–∏—Ç–æ–º—Ü–∞&gt;</code> ‚Äî –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã –ø–∏—Ç–æ–º—Ü–∞.",
                         parse_mode="HTML")

@router.callback_query(F.data.startswith("rent_select_days:"))
async def rent_select_days(call: CallbackQuery):
    pet_id = int(call.data.split(":")[1])
    uid = call.from_user.id

    pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": uid})
    if not pet:
        await call.answer("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await call.message.delete()
        return
    
    if await is_pet_in_arena_team(uid, pet_id):
        await call.answer("üö´ –≠—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–∞-–∫–æ–º–∞–Ω–¥–µ. –°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏ –µ–≥–æ –æ—Ç—Ç—É–¥–∞!", show_alert=True)
        return

    base_price = BASE_RARITY_PRICES.get(pet["rarity"], 0)
    profit_per_day = int(base_price * RENT_COST_PER_DAY_MULTIPLIER)

    text = f"üè° –¢—ã –≤—ã–±—Ä–∞–ª(–∞) <b>{pet['name']}</b> ({pet['rarity']}) –¥–ª—è –∞—Ä–µ–Ω–¥—ã.\n"
    text += f"–ü—Ä–∏–±—ã–ª—å: <b>{profit_per_day}</b> –ü–µ—Ç–∫–æ–π–Ω–æ–≤/–¥–µ–Ω—å.\n"
    text += "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—á–µ—à—å –µ–≥–æ —Å–¥–∞—Ç—å? (–ú–∞–∫—Å. 7 –¥–Ω–µ–π)\n\n"

    kb = InlineKeyboardBuilder()
    for days in range(MIN_RENT_DAYS, MAX_RENT_DAYS + 1):
        total_profit = profit_per_day * days
        kb.button(text=f"{days} –¥–Ω–µ–π ({total_profit} –ü–µ—Ç–∫–æ–π–Ω–æ–≤)", callback_data=f"rent_confirm:{pet_id}:{days}")
    
    kb.adjust(2) # Two buttons per row
    kb.row(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="rent_cancel"))

    await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.startswith("rent_confirm:"))
async def rent_confirm(call: CallbackQuery):
    uid = call.from_user.id
    _, pet_id_str, days_str = call.data.split(":")
    pet_id = int(pet_id_str)
    days = int(days_str)

    pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": uid})
    if not pet:
        await call.answer("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await call.message.delete()
        return

    if await is_pet_in_arena_team(uid, pet_id):
        await call.answer("üö´ –≠—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–∞-–∫–æ–º–∞–Ω–¥–µ. –°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏ –µ–≥–æ –æ—Ç—Ç—É–¥–∞!", show_alert=True)
        return

    # Check if pet is already rented
    if pet.get("rented_until"):
        await call.answer(f"üßê {pet['name']} —É–∂–µ –≤ –∞—Ä–µ–Ω–¥–µ –¥–æ {pet['rented_until'].strftime('%d.%m.%Y %H:%M')}.", show_alert=True)
        return

    rented_until = datetime.now() + timedelta(days=days)
    base_price = BASE_RARITY_PRICES.get(pet["rarity"], 0)
    total_profit = int(base_price * RENT_COST_PER_DAY_MULTIPLIER * days)

    await execute_query(
        "UPDATE pets SET rented_until = $1, last_rent_payout = $2 WHERE id = $3",
        {"rented_until": rented_until, "last_rent_payout": datetime.now(), "id": pet_id}
    )
    # Store expected profit for later payout (e.g., in a background task)
    await execute_query(
        "UPDATE pets SET expected_rent_profit = $1 WHERE id = $2",
        {"expected_rent_profit": total_profit, "id": pet_id}
    )

    await call.message.edit_text(
        f"üéâ <b>{pet['name']}</b> (ID {pet_id}) —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω(–∞) –≤ –∞—Ä–µ–Ω–¥—É –Ω–∞ <b>{days}</b> –¥–Ω–µ–π!\n"
        f"–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{total_profit}</b> –ü–µ—Ç–∫–æ–π–Ω–æ–≤.\n"
        f"–í–µ—Ä–Ω–µ—Ç—Å—è: {rented_until.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö", callback_data="show_rented_pets")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rent_cancel")]
        ]),
        parse_mode="HTML"
    )
    await call.answer(f"–ü–∏—Ç–æ–º–µ—Ü —Å–¥–∞–Ω –≤ –∞—Ä–µ–Ω–¥—É –Ω–∞ {days} –¥–Ω–µ–π!", show_alert=True)


@router.callback_query(F.data == "rent_cancel")
async def rent_cancel(call: CallbackQuery):
    await call.message.edit_text(
        "üè° –¢—ã –æ—Ç–º–µ–Ω–∏–ª(–∞) —Å–¥–∞—á—É –ø–∏—Ç–æ–º—Ü–∞ –≤ –∞—Ä–µ–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞—Ä–µ–Ω–¥—ã", callback_data="back_to_rent_menu")]
        ]),
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "back_to_rent_menu")
async def back_to_rent_menu_callback(call: CallbackQuery):
    await rent_cmd(call.message) # Re-call the initial /rent command logic
    await call.answer()

@router.callback_query(F.data == "show_rented_pets")
async def show_rented_pets_callback(call: CallbackQuery):
    uid = call.from_user.id
    rented_pets = await fetch_all("SELECT * FROM pets WHERE user_id = $1 AND rented_until IS NOT NULL", {"uid": uid})

    if not rented_pets:
        text = "ü§∑‚Äç‚ôÄÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∞—Ä–µ–Ω–¥–µ."
    else:
        text = "üè° <b>–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã –≤ –∞—Ä–µ–Ω–¥–µ:</b>\n\n"
        for pet in rented_pets:
            rent_end_time = pet["rented_until"].strftime('%d.%m.%Y %H:%M') if pet["rented_until"] else "N/A"
            text += (
                f"üî∏ <b>ID {pet['id']}</b> ‚Äî {pet['name']} ({pet['rarity']})\n"
                f"   –ü—Ä–∏–±—ã–ª—å (–æ–∂–∏–¥.): <b>{pet.get('expected_rent_profit', 0)}</b> –ü–µ—Ç–∫–æ–π–Ω–æ–≤\n"
                f"   –í–µ—Ä–Ω–µ—Ç—Å—è: <i>{rent_end_time}</i>\n\n"
            )
            
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞—Ä–µ–Ω–¥—ã", callback_data="back_to_rent_menu")
    kb.adjust(1)

    await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await call.answer()

# --- Background task for rent payouts (needs to be called periodically from your main bot loop) ---
async def process_rent_payouts():
    # Find pets whose rent period has ended
    overdue_rentals = await fetch_all("SELECT * FROM pets WHERE rented_until IS NOT NULL AND rented_until < $1", {"now": datetime.now()})

    for pet in overdue_rentals:
        user_id = pet["user_id"]
        profit = pet.get("expected_rent_profit", 0)

        # Add coins to user
        await execute_query("UPDATE users SET coins = coins + $1 WHERE user_id = $2", {"coins": profit, "user_id": user_id})
        # Reset pet's rent status
        await execute_query("UPDATE pets SET rented_until = NULL, expected_rent_profit = 0, last_rent_payout = NULL WHERE id = $1", {"id": pet["id"]})

        # Notify user (if bot can reach them)
        try:
            bot = router.bot # Access bot object from router
            await bot.send_message(
                user_id,
                f"üéâ –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü <b>{pet['name']}</b> ({pet['rarity']}) –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –∞—Ä–µ–Ω–¥—ã! "
                f"–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) <b>{profit}</b> –ü–µ—Ç–∫–æ–π–Ω–æ–≤ –ø—Ä–∏–±—ã–ª–∏! üí∞",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Failed to send rent payout notification to {user_id}: {e}")
            pass # User might have blocked the bot, etc.

    # Find pets whose rent is active but payout might be due (e.g., daily payouts)
    # This example only pays out at the end of the term. If you want daily payouts,
    # you'd need more complex logic here, e.g., checking last_rent_payout and calculating partial profits.
    # For simplicity, current design pays expected_rent_profit at rental end.