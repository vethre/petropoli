# bot/handlers/bonus.py

import asyncio
import random
import json
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from db.db import fetch_one, fetch_all, execute_query
from bot.utils.pet_generator import EGG_TYPES # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —è–π—Ü–∞—Ö

router = Router()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤ ---
DAILY_COIN_RANGE = (50, 200)
DAILY_XP_RANGE = (100, 300)
DAILY_EGG_CHANCE = 0.25 # 25% —à–∞–Ω—Å –Ω–∞ —è–π—Ü–æ
DAILY_EGG_TYPES = ["–±–∞–∑–æ–≤–æ–µ", "–≤—Å–º—è—Ç–∫—É"] # –¢–∏–ø—ã —è–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
FAV_PET_STAT_BONUS_PERCENT = 0.05 # 5% –±–æ–Ω—É—Å –∫ HP, ATK, DEF –ª—é–±–∏–º—Ü–∞
TOP_PET_COIN_REWARD = 300
TOP_PET_XP_REWARD = 150 # XP –¥–ª—è –ü–∏—Ç–æ–º–µ—Ü –î–Ω—è
TOP_PET_DURATION_HOURS = 24 # –ö–∞–∫ –¥–æ–ª–≥–æ –ø–∏—Ç–æ–º–µ—Ü –±—É–¥–µ—Ç "–ü–∏—Ç–æ–º—Ü–µ–º –¥–Ω—è"

# –°–ø–∏—Å–æ–∫ "–º–µ–º–Ω—ã—Ö" –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ü–∏—Ç–æ–º—Ü–∞ –¥–Ω—è
TOP_PET_NICKNAMES = [
    "–ì–µ—Ä–æ–π –î–Ω—è", "–õ–µ–≥–µ–Ω–¥–∞ –ê—Ä–µ–Ω—ã", "–ü—É—à–∏—Å—Ç–∞—è –ó–≤–µ–∑–¥–∞", "–•–≤–æ—Å—Ç–∞—Ç—ã–π –ë–æ–≥",
    "–ò–º–±–∞-–ü–∏—Ç–æ–º–µ—Ü", "–ö–æ—Ä–æ–ª—å –õ–æ–≥–æ–≤–∞", "–î–Ω–µ–≤–Ω–æ–π –î–æ–∑–æ—Ä", "–ò–∑–±—Ä–∞–Ω–Ω—ã–π",
    "–ü—Ä–æ—Å—Ç–æ –ö—Ä–∞—Å–∞–≤—á–∏–∫", "–í–µ–ª–∏—á–∞–π—à–∏–π –∏–∑ –í–µ–ª–∏–∫–∏—Ö"
]

current_top_pet = {
    "pet_id": None,
    "user_id": None,
    "nickname": None,
    "ends_at": None # datetime object
}

def get_xp_for_next_level(level: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å."""
    return level * 100 + 50

async def update_pet_stats_and_xp(bot_instance, user_id: int, pet_id: int, xp_gain: int = 0): # –î–æ–±–∞–≤–∏–ª–∏ bot_instance –∏ user_id
    pet_record = await fetch_one("SELECT id, name, stats, xp, level FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": user_id})
    if not pet_record:
        return False

    current_xp = pet_record['xp']
    current_level = pet_record['level']
    current_stats = json.loads(pet_record['stats']) if isinstance(pet_record['stats'], str) else pet_record['stats']
    pet_name = pet_record['name']

    new_xp = current_xp + xp_gain
    
    leveled_up = False
    original_hp = current_stats['hp']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    while new_xp >= get_xp_for_next_level(current_level):
        xp_needed = get_xp_for_next_level(current_level)
        new_xp -= xp_needed
        current_level += 1
        leveled_up = True
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        current_stats['atk'] += random.randint(1, 3)
        current_stats['def'] += random.randint(1, 3)
        current_stats['hp'] += random.randint(3, 7)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ –ë–î –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        await execute_query(
            "UPDATE pets SET xp = $1, level = $2, stats = $3 WHERE id = $4 AND user_id = $5",
            {"xp": new_xp, "level": current_level, "stats": json.dumps(current_stats), "id": pet_id, "user_id": user_id}
        )
        
        await execute_query("UPDATE pets SET current_hp = $1 WHERE id = $2", {"current_hp": current_stats['hp'], "id": pet_id})

        if current_level >= 100: 
            new_xp = 0 
            await execute_query(
                "UPDATE pets SET xp = $1, level = $2 WHERE id = $3 AND user_id = $4",
                {"xp": new_xp, "level": current_level, "id": pet_id, "user_id": user_id}
            )
            break
    await execute_query("UPDATE pets SET xp = $1 WHERE id = $2 AND user_id = $3", 
                        {"xp": new_xp, "id": pet_id, "user_id": user_id})

    if leveled_up:
        user_chat_info = await bot_instance.get_chat(user_id)
        user_name = user_chat_info.first_name if user_chat_info.first_name else user_chat_info.full_name
        
        await bot_instance.send_message(
            user_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user_name}!\n–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü <b>{pet_name}</b> –¥–æ—Å—Ç–∏–≥ <b>–£—Ä–æ–≤–Ω—è {current_level}</b>!\n"
            f"–ù–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n‚öî –ê—Ç–∞–∫–∞: {current_stats['atk']} | üõ° –ó–∞—â–∏—Ç–∞: {current_stats['def']} | ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {current_stats['hp']}",
            parse_mode="HTML"
        )
    return True


# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (/daily) ---
@router.message(Command("daily"))
async def daily_reward_cmd(message: Message):
    uid = message.from_user.id
    user = await fetch_one("SELECT last_daily_claim, coins FROM users WHERE user_id = $1", {"uid": uid})

    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start!")
        return

    last_claim_str = user['last_daily_claim']
    last_claim_dt = None
    if last_claim_str:
        last_claim_dt = last_claim_str.replace(tzinfo=timezone.utc)
    
    now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)

    if last_claim_dt and (now_utc - last_claim_dt) < timedelta(hours=23, minutes=59):
        next_claim_time = last_claim_dt + timedelta(hours=24)
        time_left = next_claim_time - now_utc
        hours, remainder = divmod(time_left.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        await message.answer(f"–¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É. –°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {int(hours)} —á. {int(minutes)} –º–∏–Ω.")
        return

    coins_reward = random.randint(DAILY_COIN_RANGE[0], DAILY_COIN_RANGE[1])
    user_pets_records = await fetch_all("SELECT id, name FROM pets WHERE user_id = $1", {"uid": uid})
    
    xp_reward_text = ""
    if user_pets_records:
        random_pet = random.choice(user_pets_records)
        xp_reward = random.randint(DAILY_XP_RANGE[0], DAILY_XP_RANGE[1])
        await update_pet_stats_and_xp(message.bot, uid, random_pet['id'], xp_gain=xp_reward)
        xp_reward_text = f", –∞ —Ç–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü <b>{random_pet['name']}</b> –ø–æ–ª—É—á–∏–ª <b>{xp_reward} XP</b>"
    else:
        xp_reward_text = ", –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP"

    egg_reward_text = ""
    egg_obtained = False
    if random.random() < DAILY_EGG_CHANCE:
        egg_type_key = random.choice(DAILY_EGG_TYPES)
        egg_info = EGG_TYPES[egg_type_key]
        
        user_data_for_eggs = await fetch_one("SELECT eggs FROM users WHERE user_id = $1 FOR UPDATE", {"uid": uid})
        current_eggs = json.loads(user_data_for_eggs['eggs']) if user_data_for_eggs['eggs'] else []

        new_egg_record = {
            "type": egg_type_key,
            "obtained_at": datetime.utcnow().isoformat(),
            "source": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"
        }
        current_eggs.append(new_egg_record)
        await execute_query("UPDATE users SET eggs = $1 WHERE user_id = $2", {"eggs": json.dumps(current_eggs), "uid": uid})
        egg_reward_text = f" –∏ {egg_info['name_ru']} —è–π—Ü–æ! ü•ö"
        egg_obtained = True

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
    await execute_query(
        "UPDATE users SET coins = coins + $1, last_daily_claim = $2 WHERE user_id = $3",
        {"coins": coins_reward, "last_daily_claim": now_utc, "uid": uid}
    )

    await message.answer(
        f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!\n"
        f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª <b>{coins_reward} üí∞</b>{xp_reward_text}{egg_reward_text}\n\n"
        f"–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –º–æ–Ω–µ—Ç—ã: {user['coins'] + coins_reward} üí∞",
        parse_mode="HTML"
    )

# --- –õ—é–±–∏–º—ã–π –ø–∏—Ç–æ–º–µ—Ü (/fav) ---
@router.message(Command("fav"))
async def fav_pet_cmd(message: Message, command: Command):
    uid = message.from_user.id
    args = command.args.split() if command.args else []

    if not args:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ª—é–±–∏–º—Ü–∞
        user_data = await fetch_one("SELECT fav_pet_id, fav_pet_nickname FROM users WHERE user_id = $1", {"uid": uid})
        fav_pet_id = user_data['fav_pet_id']
        fav_pet_nickname = user_data['fav_pet_nickname']

        if fav_pet_id:
            pet_record = await fetch_one("SELECT name, rarity FROM pets WHERE id = $1 AND user_id = $2", {"id": fav_pet_id, "user_id": uid})
            if pet_record:
                display_name = fav_pet_nickname if fav_pet_nickname else pet_record['name']
                await message.answer(f"‚ù§Ô∏è –¢–≤–æ–π –ª—é–±–∏–º—á–∏–∫: <b>{display_name}</b> ({pet_record['name']}, {pet_record['rarity']})\n"
                                     f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫: <code>/fav name &lt;–∏–º—è&gt;</code>\n"
                                     f"–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å: <code>/fav del</code>", parse_mode="HTML")
            else:
                # –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª —É–¥–∞–ª–µ–Ω. –û—á–∏—â–∞–µ–º fav_pet_id
                await execute_query("UPDATE users SET fav_pet_id = NULL, fav_pet_nickname = NULL WHERE user_id = $1", {"uid": uid})
                await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ª—é–±–∏–º–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π <code>/fav set &lt;ID –ø–∏—Ç–æ–º—Ü–∞&gt;</code>, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ.", parse_mode="HTML")
        else:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ª—é–±–∏–º–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π <code>/fav set &lt;ID –ø–∏—Ç–æ–º—Ü–∞&gt;</code>, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ.", parse_mode="HTML")
        return

    subcommand = args[0].lower()

    if subcommand == "set":
        if len(args) < 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ ID –ø–∏—Ç–æ–º—Ü–∞. –ü—Ä–∏–º–µ—Ä: <code>/fav set 123</code>", parse_mode="HTML")
            return
        try:
            pet_id = int(args[1])
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–∏—Ç–æ–º—Ü–∞. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="HTML")
            return
        
        pet_record = await fetch_one("SELECT id, name FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": uid})
        if pet_record:
            await execute_query("UPDATE users SET fav_pet_id = $1, fav_pet_nickname = NULL WHERE user_id = $2", {"fav_pet_id": pet_id, "uid": uid})
            await message.answer(f"‚ù§Ô∏è –ü–∏—Ç–æ–º–µ—Ü <b>{pet_record['name']}</b> —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π –ª—é–±–∏–º—á–∏–∫! –û–Ω –ø–æ–ª—É—á–∏—Ç –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∫ —Å—Ç–∞—Ç–∞–º –≤ –±–æ—é.", parse_mode="HTML")
        else:
            await message.answer("–ü–∏—Ç–æ–º–µ—Ü —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ.", parse_mode="HTML")

    elif subcommand == "del":
        await execute_query("UPDATE users SET fav_pet_id = NULL, fav_pet_nickname = NULL WHERE user_id = $1", {"uid": uid})
        await message.answer("üíî –õ—é–±–∏–º—ã–π –ø–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –Ω–µ—Ç –ª—é–±–∏–º—á–∏–∫–∞.", parse_mode="HTML")

    elif subcommand == "name":
        if len(args) < 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –ü—Ä–∏–º–µ—Ä: <code>/fav name –î–∏–º–∏—Ç—Ä–∏–∫</code>", parse_mode="HTML")
            return
        
        new_nickname = " ".join(args[1:])
        if len(new_nickname) > 20: # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏
            await message.answer("–ò–º—è –ª—é–±–∏–º—á–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        user_data = await fetch_one("SELECT fav_pet_id FROM users WHERE user_id = $1", {"uid": uid})
        if user_data['fav_pet_id']:
            await execute_query("UPDATE users SET fav_pet_nickname = $1 WHERE user_id = $2", {"fav_pet_nickname": new_nickname, "uid": uid})
            await message.answer(f"–ò–º—è –ª—é–±–∏–º–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{new_nickname}</b>!", parse_mode="HTML")
        else:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª—é–±–∏–º–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å –µ–º—É –∏–º—è. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π <code>/fav set &lt;ID –ø–∏—Ç–æ–º—Ü–∞&gt;</code>.", parse_mode="HTML")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π <code>/fav</code>, <code>/fav set &lt;ID&gt;</code>, <code>/fav del</code> –∏–ª–∏ <code>/fav name &lt;–∏–º—è&gt;</code>.", parse_mode="HTML")


# --- –ü–∏—Ç–æ–º–µ—Ü –¥–Ω—è (/top_pet) ---
@router.message(Command("top_pet"))
async def top_pet_cmd(message: Message):
    uid = message.from_user.id
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})

    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start!")
        return
    now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)

    if current_top_pet["pet_id"] and current_top_pet["ends_at"] and now_utc < current_top_pet["ends_at"]:
        # –ü–∏—Ç–æ–º–µ—Ü –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω –∏ —Å—Ä–æ–∫ –Ω–µ –∏—Å—Ç–µ–∫
        top_pet_owner_name_record = await fetch_one("SELECT username FROM users WHERE user_id = $1", {"uid": current_top_pet['user_id']})
        owner_name = top_pet_owner_name_record['username'] if top_pet_owner_name_record else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        await message.answer(
            f"üåü –ü–∏—Ç–æ–º–µ—Ü –î–Ω—è: <b>{current_top_pet['nickname']}</b>!\n"
            f"–≠—Ç–æ—Ç –ø–æ—á–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–∏—Ç–æ–º—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{owner_name}.\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –ü–∏—Ç–æ–º–µ—Ü –î–Ω—è –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —á–µ—Ä–µ–∑ "
            f"{int((current_top_pet['ends_at'] - now_utc).total_seconds() / 3600)} —á. "
            f"{int(((current_top_pet['ends_at'] - now_utc).total_seconds() % 3600) / 60)} –º–∏–Ω."
            , parse_mode="HTML"
        )
        return

    all_pets = await fetch_all("SELECT id, name, user_id, rarity, level FROM pets")
    
    if not all_pets:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å '–ü–∏—Ç–æ–º—Ü–∞ –î–Ω—è'.")
        return
    
    selected_pet = random.choice(all_pets)
    selected_owner_id = selected_pet['user_id']
    selected_pet_nickname = random.choice(TOP_PET_NICKNAMES)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    current_top_pet["pet_id"] = selected_pet['id']
    current_top_pet["user_id"] = selected_owner_id
    current_top_pet["nickname"] = selected_pet_nickname
    current_top_pet["ends_at"] = now_utc + timedelta(hours=TOP_PET_DURATION_HOURS)

    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤–ª–∞–¥–µ–ª—å—Ü—É
    await execute_query("UPDATE users SET coins = coins + $1 WHERE user_id = $2", {"coins": TOP_PET_COIN_REWARD, "uid": selected_owner_id})
    await update_pet_stats_and_xp(selected_pet['id'], xp_gain=TOP_PET_XP_REWARD) # –ë–æ–Ω—É—Å XP –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞
    
    owner_username_record = await fetch_one("SELECT username FROM users WHERE user_id = $1", {"uid": selected_owner_id})
    owner_username = owner_username_record['username'] if owner_username_record else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

    announcement_text = (
        f"üåü –í–ù–ò–ú–ê–ù–ò–ï! –í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π <b>–ü–∏—Ç–æ–º–µ—Ü –î–Ω—è</b>!\n"
        f"–ü–æ—á–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª \"{selected_pet_nickname}\" –ø–æ–ª—É—á–∞–µ—Ç –ø–∏—Ç–æ–º–µ—Ü "
        f"<b>{selected_pet['name']}</b> ({selected_pet['rarity']}, –£—Ä. {selected_pet['level']}) "
        f"–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{owner_username}!\n\n"
        f"–í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç {TOP_PET_COIN_REWARD} üí∞, –∞ {selected_pet['name']} –ø–æ–ª—É—á–∞–µ—Ç {TOP_PET_XP_REWARD} XP!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
    await message.answer(announcement_text, parse_mode="HTML")
