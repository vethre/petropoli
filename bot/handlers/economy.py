import json
import random
from datetime import datetime, timedelta, timezone
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from bot.handlers.start import get_zone_buff
from db.db import fetch_one, execute_query, fetch_all

router = Router()

COLLECT_COOLDOWN_MINUTES = 60

@router.message(Command("collect"))
async def collect_cmd(message: Message):
    uid = message.from_user.id

    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})
    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start!")
        return

    pets = await fetch_all("SELECT * FROM pets WHERE user_id = $1", {"uid": uid})
    if not pets:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ üòø\n–ö—É–ø–∏ —è–π—Ü–æ —á–µ—Ä–µ–∑ /buy_egg –∏ –≤—ã–≤–µ–¥–∏ –∫–æ–≥–æ-—Ç–æ!")
        return
    
    buff_mult = await get_zone_buff(user)
    
    now = datetime.now(timezone.utc)
    total_collected = 0
    updated_pets = []

    for pet in pets:
        last = pet["last_collected"]
        if last:
            try:
                last = last.astimezone(timezone.utc)
            except Exception:
                last = datetime.strptime(last, "%Y-%m-%dT%H:%M:%S.%f%z")
        if not last or (now - last) >= timedelta(minutes=COLLECT_COOLDOWN_MINUTES):
            income = int(pet["coin_rate"] * buff_mult)
            total_collected += income
            updated_pets.append(pet["id"])

    if not updated_pets:
        await message.answer("‚è≥ –ï—â—ë —Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ ‚Äî –ø–∏—Ç–æ–º—Ü—ã –µ—â—ë –Ω–µ –ø—Ä–∏–Ω–µ—Å–ª–∏ –º–æ–Ω–µ—Ç!")
        return
    
    await execute_query(
        "UPDATE users SET coins = coins + $1 WHERE user_id = $2",
        {"coins": total_collected, "uid": uid}
    )

    for pet_id in updated_pets:
        await execute_query(
            "UPDATE pets SET last_collected = $1 WHERE id = $2",
            {"last_collected": now, "id": pet_id}
        )

    await message.answer(f"üí∞ –¢—ã —Å–æ–±—Ä–∞–ª <b>{total_collected}</b> –ø–µ—Ç–∫–æ–π–Ω–æ–≤ –æ—Ç —Å–≤–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤!")

TRAIN_COST_BASE = 50
TRAIN_COST_PER_LEVEL = 10
XP_GAIN_RANGE = (10, 25)

@router.message(Command("train"))
async def train_cmd(message: Message, command: CommandObject):
    uid = message.from_user.id
    args = command.args

    if not args:
        await message.answer("‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /train 'id' 'stat'\n–ù–∞–ø—Ä–∏–º–µ—Ä: /train 1 atk")
        return
    
    parts = args.strip().split()
    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É: hp, atk –∏–ª–∏ def.")
        return

    pet_id_raw, stat = parts
    if stat not in ("hp", "atk", "def"):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π: hp, atk, def.")
        return
    
    try:
        pet_id = int(pet_id_raw)
    except ValueError:
        await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "uid": uid})
    if not pet:
        await message.answer("üêæ –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    cost = TRAIN_COST_BASE + pet["level"] * TRAIN_COST_PER_LEVEL
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})
    if user["coins"] < cost:
        await message.answer(f"üí∏ –î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω–æ {cost} –ø–µ—Ç–∫–æ–π–Ω–æ–≤. –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.")
        return
    
    cls = pet["class"]
    boost = 0
    if cls == "–î–∞–º–∞–≥-–¥–∏–ª–ª–µ—Ä":
        boost = random.randint(3, 7) if stat == "atk" else random.randint(1, 3)
    elif cls == "–°–∞–ø–ø–æ—Ä—Ç":
        boost = random.randint(3, 7) if stat == "def" else random.randint(1, 3)
    elif cls == "–ë–∞–ª–∞–Ω—Å":
        boost = random.randint(2, 5)
    elif cls == "–¢–∞–Ω–∫":
        boost = random.randint(3, 7) if stat == "hp" else random.randint(1, 3)
    else:
        boost = random.randint(2, 4)

    xp_gain = random.randint(*XP_GAIN_RANGE)
    new_xp = pet["xp"] + xp_gain
    new_lvl = pet["level"]
    new_xp_needed = pet["xp_needed"]
    leveled_up = False

    if new_xp >= pet["xp_needed"]:
        new_lvl  += 1
        new_xp = 0
        new_xp_needed = int(pet["xp_needed"] * 1.25)
        leveled_up = True

    stats = json.loads(pet["stats"])
    stats[stat] += boost

    coin_rate = pet["coin_rate"]
    if leveled_up and new_lvl % 2 == 0:
        coin_rate += 1

    await execute_query(
        """
        UPDATE pets SET stats = $1, xp = $2, xp_needed = $3, level = $4, coin_rate = $5
        WHERE id = $6
        """,
        {
            "stats": json.dumps(stats),
            "xp": new_xp,
            "xp_needed": new_xp_needed,
            "level": new_lvl,
            "coin_rate": coin_rate,
            "id": pet_id
        }
    )

    await execute_query(
        "UPDATE users SET coins = coins - $1 WHERE user_id = $2",
        {"coins": cost, "uid": uid}
    )

    msg = (
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—ã –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª <b>{pet['name']}</b>!\n"
        f"üìà {stat.upper()} –≤—ã—Ä–æ—Å –Ω–∞ <b>{boost}</b>.\n"
        f"üí° –ü–æ–ª—É—á–µ–Ω–æ {xp_gain} XP.\n"
    )
    if leveled_up:
        msg += f"üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ <b>{new_lvl}</b>!\nüí∞ –î–æ—Ö–æ–¥: {coin_rate}/—á–∞—Å"

    await message.answer(msg)