import random
from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.handlers.start import check_quest_progress, check_zone_unlocks
from db.db import fetch_one, execute_query
from bot.utils.pet_generator import EGG_TYPES, PETS_BY_RARITY, RARITIES, RARITY_STATS_RANGE, RARITY_TOTAL_STAT_MULTIPLIER, generate_stats_for_class, roll_pet_from_egg_type
import json
from datetime import datetime

router = Router()

async def create_pet_and_save(user_id: int, egg_type: str) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —è–π—Ü–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ pet_generator
    pet_data = roll_pet_from_egg_type(egg_type, PETS_BY_RARITY, EGG_TYPES)
    
    if not pet_data:
        return None # –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏

    rarity = pet_data["rarity"]
    pclass = pet_data["class"]

    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—ã
    stats = generate_stats_for_class(pclass, rarity, RARITY_STATS_RANGE, RARITY_TOTAL_STAT_MULTIPLIER)
    
    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º coin_rate –∏–∑ RARITIES (–∏–∑ config.py)
    rarity_info_for_coin_rate = RARITIES[rarity]
    coin_rate = random.randint(rarity_info_for_coin_rate["coin_rate_range"][0], rarity_info_for_coin_rate["coin_rate_range"][1])

    initial_xp_needed = 100 # –ú–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–≤–∏—Å–∏–º—ã–º –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏

    new_pet_data = {
        "user_id": user_id,
        "name": pet_data["name"],
        "class": pclass,
        "rarity": rarity,
        "level": 1,
        "xp": 0,
        "xp_needed": initial_xp_needed,
        "stats": json.dumps(stats),
        "coin_rate": coin_rate,
        "last_collected": datetime.utcnow() # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å explore
    }
    
    # Save to database
    query = """
    INSERT INTO pets (user_id, name, class, rarity, level, xp, xp_needed, stats, coin_rate, last_collected)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
    RETURNING id, name, class, rarity, level;
    """
    result = await fetch_one(query, new_pet_data)
    
    if result:
        # Assuming result contains the returned columns from RETURNING
        return {
            "id": result['id'],
            "name": result['name'],
            "class": result['class'],
            "rarity": result['rarity'],
            "level": result['level'],
            "stats": stats, # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "coin_rate": coin_rate
        }
    return None

@router.message(Command("buy_egg"))
async def buy_egg_cmd(message: Message):
    uid = message.from_user.id
    user = await fetch_one("SELECT coins FROM users WHERE user_id = $1", {"uid": uid})
    
    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start!")
        return

    builder = InlineKeyboardBuilder()
    menu_text = "ü•ö –í—ã–±–µ—Ä–∏ —è–π—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å:\n\n"

    for egg_key, egg_info in EGG_TYPES.items():
        if egg_info["cost"] is not None: # –¢–æ–ª—å–∫–æ —Ç–µ —è–π—Ü–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç—ã
            cost_str = f" ({egg_info['cost']} üí∞)"
            builder.button(text=f"{egg_info['name_ru']}{cost_str}", callback_data=f"buy_egg_{egg_key}")
            menu_text += f"<b>{egg_info['name_ru']}</b>: {egg_info['description']} - {egg_info['cost']} üí∞\n"
    
    builder.adjust(1) # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫

    await message.answer(
        menu_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("buy_egg_"))
async def process_buy_egg_callback(callback: CallbackQuery):
    uid = callback.from_user.id
    egg_type_key = callback.data.split("buy_egg_")[1]
    
    egg_info = EGG_TYPES.get(egg_type_key)
    if not egg_info or egg_info["cost"] is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —è–π—Ü–∞ –∏–ª–∏ —ç—Ç–æ —è–π—Ü–æ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å.", show_alert=True)
        return

    cost = egg_info["cost"]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FOR UPDATE –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç
    user = await fetch_one("SELECT coins, eggs, bought_eggs FROM users WHERE user_id = $1 FOR UPDATE", {"uid": uid})
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await callback.answer()
        return

    if user['coins'] < cost:
        await callback.message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –£ —Ç–µ–±—è {user['coins']} üí∞, –∞ –Ω—É–∂–Ω–æ {cost} üí∞.")
        await callback.answer()
        return

    # –í—ã—á–∏—Ç–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —è–π—Ü–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_eggs = json.loads(user['eggs']) if user['eggs'] else []
    
    new_egg_record = {
        "type": egg_type_key, # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —è–π—Ü–∞, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ –≤—ã–ª—É–ø–ª—è—Ç—å
        "bought_at": datetime.utcnow().isoformat(),
    }
    current_eggs.append(new_egg_record)

    await execute_query(
        "UPDATE users SET coins = coins - $1, eggs = $2, bought_eggs = bought_eggs + 1 WHERE user_id = $3",
        {"cost": cost, "eggs": json.dumps(current_eggs), "uid": uid}
    )

    await callback.message.answer(
        f"ü•ö –¢—ã –∫—É–ø–∏–ª {egg_info['name_ru']} –∑–∞ {cost} üí∞!\n"
        f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {user['coins'] - cost} üí∞.\n"
        f"–ù–∞–ø–∏—à–∏ /hatch, —á—Ç–æ–±—ã –µ–≥–æ –≤—ã–ª—É–ø–∏—Ç—å.",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(Command("hatch"))
async def hatch_egg_cmd(message: Message):
    uid = message.from_user.id

    user = await fetch_one("SELECT coins, eggs, hatched_count FROM users WHERE user_id = $1 FOR UPDATE", {"uid": uid})
    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start!")
        return
    
    current_eggs = json.loads(user['eggs']) if user['eggs'] else []
    if not current_eggs:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —è–∏—Ü –¥–ª—è –≤—ã–ª—É–ø–ª–µ–Ω–∏—è. –ö—É–ø–∏ —è–π—Ü–æ —Å –ø–æ–º–æ—â—å—é /buy_egg.")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —è–π—Ü–æ –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ)
    egg_to_hatch = current_eggs.pop(0) 
    egg_type_key = egg_to_hatch.get("type", "–±–∞–∑–æ–≤–æ–µ") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é '–±–∞–∑–æ–≤–æ–µ', –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω

    # –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ò–ü–ê –Ø–ô–¶–ê
    new_pet_data = await create_pet_and_save(uid, egg_type_key)

    if not new_pet_data:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–ª—É–ø–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —è–∏—Ü —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await execute_query(
        "UPDATE users SET eggs = $1, hatched_count = hatched_count + 1 WHERE user_id = $2",
        {"eggs": json.dumps(current_eggs), "uid": uid}
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–∞ (–ø–æ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ)
    if user["hatched_count"] == 1: # –≠—Ç–æ –±—É–¥–µ—Ç 0 + 1 = 1 –ø–æ—Å–ª–µ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —è–π—Ü–∞
        await check_quest_progress(uid, message)

    await message.answer(
        f"üéâ –ò–∑ —è–π—Ü–∞ –≤—ã–ª—É–ø–∏–ª—Å—è –ø–∏—Ç–æ–º–µ—Ü!\n\n"
        f"üîπ <b>{new_pet_data['name']}</b> ({new_pet_data['rarity']} ‚Äî {new_pet_data['class']})\n"
        f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {new_pet_data['level']} | XP: 0/{new_pet_data.get('xp_needed', 100)}\n" # XP_needed –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ç–∞
        f"üìä –°—Ç–∞—Ç—ã:\n"
        f" ¬† üó° –ê—Ç–∞–∫–∞: {new_pet_data['stats']['atk']}\n"
        f" ¬† üõ° –ó–∞—â–∏—Ç–∞: {new_pet_data['stats']['def']}\n"
        f" ¬† ‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: {new_pet_data['stats']['hp']}\n"
        f"üí∞ –î–æ—Ö–æ–¥: {new_pet_data['coin_rate']} –ø–µ—Ç–∫–æ–π–Ω–æ–≤/—á–∞—Å",
        parse_mode="HTML"
    )