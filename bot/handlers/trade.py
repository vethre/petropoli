# trade.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from db.db import fetch_one, execute_query
import json
import asyncio
from aiogram.exceptions import TelegramBadRequest

router = Router()

# Global dictionary to store pending trade offers
# Format: { proposer_uid: { 'target_uid': target_uid, 'proposer_pet_id': proposed_pet_id,
#                           'proposer_pet_name': pet_name, 'proposer_pet_rarity': rarity_string } }
pending_trades = {}

# Define rarity order for R2R system based on provided RARITY_CHANCES
# This ensures consistency with your game's rarity hierarchy.
RARITY_ORDER = [r[0] for r in [
    ("–û–±—ã—á–Ω–∞—è", 40),
    ("–ù–µ–æ–±—ã—á–Ω–∞—è", 20),
    ("–†–µ–¥–∫–∞—è", 12),
    ("–û—á–µ–Ω—å –†–µ–¥–∫–∞—è", 8),
    ("–≠–ø–∏—á–µ—Å–∫–∞—è", 6),
    ("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", 4),
    ("–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", 3),
    ("–î—Ä–µ–≤–Ω—è—è", 3),
    ("–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è", 2),
    ("–ê–±—Å–æ–ª—é—Ç–Ω–∞—è", 2),
]]

# Helper function to check if a pet is in a user's active arena team
async def is_pet_in_arena_team(user_id: int, pet_id: int) -> bool:
    arena_team_data = await fetch_one("SELECT pet_ids FROM arena_team WHERE user_id = $1", {"user_id": user_id})
    if arena_team_data and arena_team_data["pet_ids"]:
        active_pet_ids = json.loads(arena_team_data["pet_ids"])
        return pet_id in active_pet_ids
    return False

@router.message(Command("trade"))
async def trade_cmd(message: Message):
    """
    Handles the /trade command for Rarity to Rarity (R2R) pet exchanges.
    Allows users to propose, accept, and decline trades.
    """
    uid = message.from_user.id
    args = message.text.strip().split()

    if len(args) < 2:
        await message.answer(
            "ü§ù <b>–°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞ R2R</b>\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω: <code>/trade &lt;ID —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞&gt; &lt;ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è&gt;</code>\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω: <code>/trade accept &lt;ID –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ&gt; &lt;ID —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞&gt;</code>\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω: <code>/trade decline &lt;ID –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ&gt;</code>",
            parse_mode="HTML"
        )
        return

    command = args[1].lower()

    if command == "accept":
        if len(args) != 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: <code>/trade accept &lt;ID –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ&gt; &lt;ID —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞&gt;</code>", parse_mode="HTML")
            return
        
        try:
            proposer_uid = int(args[2])
            acceptor_pet_id = int(args[3])
        except ValueError:
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.", parse_mode="HTML")
            return

        # Check if there's a pending trade for this user from the proposer
        if proposer_uid not in pending_trades or pending_trades[proposer_uid]['target_uid'] != uid:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="HTML")
            return
        
        proposer_trade_info = pending_trades[proposer_uid]
        proposer_pet_id = proposer_trade_info['proposer_pet_id']
        proposer_pet_rarity = proposer_trade_info['proposer_pet_rarity']

        # Fetch acceptor's pet details
        acceptor_pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": acceptor_pet_id, "user_id": uid})
        if not acceptor_pet:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ —Å —Ç–∞–∫–∏–º ID.", parse_mode="HTML")
            return

        # Check if acceptor's pet is in arena team
        if await is_pet_in_arena_team(uid, acceptor_pet_id):
            await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–∞-–∫–æ–º–∞–Ω–¥–µ.", parse_mode="HTML")
            return

        acceptor_pet_rarity = acceptor_pet['rarity']

        # R2R Logic: Only allow trading pets of the same rarity
        if proposer_pet_rarity != acceptor_pet_rarity:
            await message.answer(
                f"–û–±–º–µ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ü–∏—Ç–æ–º—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <b>–æ–¥–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏</b>.\n"
                f"–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü: <b>{acceptor_pet['name']}</b> ({acceptor_pet_rarity})\n"
                f"–ü–∏—Ç–æ–º–µ—Ü –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: <b>{proposer_trade_info['proposer_pet_name']}</b> ({proposer_pet_rarity})",
                parse_mode="HTML"
            )
            return

        # Perform the trade
        # Update user_id for proposer's pet to acceptor's UID
        await execute_query("UPDATE pets SET user_id = $1 WHERE id = $2", {"user_id": uid, "id": proposer_pet_id})
        # Update user_id for acceptor's pet to proposer's UID
        await execute_query("UPDATE pets SET user_id = $1 WHERE id = $2", {"user_id": proposer_uid, "id": acceptor_pet_id})

        # Clean up pending trade
        del pending_trades[proposer_uid]

        # Notify both users
        proposer_chat = await message.bot.get_chat(proposer_uid)
        proposer_name = proposer_chat.first_name if proposer_chat.first_name else proposer_chat.full_name

        acceptor_chat = await message.bot.get_chat(uid)
        acceptor_name = acceptor_chat.first_name if acceptor_chat.first_name else acceptor_chat.full_name

        await message.answer(
            f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–¢—ã –ø–æ–ª—É—á–∏–ª <b>{proposer_trade_info['proposer_pet_name']}</b> ({proposer_pet_rarity}) –æ—Ç <b>{proposer_name}</b>.",
            parse_mode="HTML"
        )
        try:
            await message.bot.send_message(
                proposer_uid,
                f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                f"–¢—ã –ø–æ–ª—É—á–∏–ª <b>{acceptor_pet['name']}</b> ({acceptor_pet_rarity}) –æ—Ç <b>{acceptor_name}</b>.",
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            # User might have blocked the bot or not started a chat
            pass 

    elif command == "decline":
        if len(args) != 3:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: <code>/trade decline &lt;ID –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ&gt;</code>", parse_mode="HTML")
            return
        
        try:
            proposer_uid = int(args[2])
        except ValueError:
            await message.answer("ID –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="HTML")
            return

        if proposer_uid not in pending_trades or pending_trades[proposer_uid]['target_uid'] != uid:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="HTML")
            return
        
        proposer_trade_info = pending_trades[proposer_uid]
        proposer_pet_name = proposer_trade_info['proposer_pet_name']
        proposer_pet_rarity = proposer_trade_info['proposer_pet_rarity']

        # Remove the pending trade
        del pending_trades[proposer_uid]

        proposer_chat = await message.bot.get_chat(proposer_uid)
        proposer_name = proposer_chat.first_name if proposer_chat.first_name else proposer_chat.full_name

        acceptor_chat = await message.bot.get_chat(uid)
        acceptor_name = acceptor_chat.first_name if acceptor_chat.first_name else acceptor_chat.full_name

        await message.answer(f"‚ùå –¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç <b>{proposer_name}</b>.", parse_mode="HTML")
        try:
            await message.bot.send_message(
                proposer_uid,
                f"‚ùå <b>{acceptor_name}</b> –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω—è—Ç—å <b>{proposer_pet_name}</b> ({proposer_pet_rarity}).",
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            pass # User might have blocked the bot

    else: # This is the initial trade offer (e.g., /trade <pet_id> <user_id>)
        try:
            my_pet_id = int(args[1])
            target_uid = int(args[2]) # Assuming target is always by ID for now
        except (ValueError, IndexError):
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π: <code>/trade &lt;ID —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞&gt; &lt;ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è&gt;</code>", 
                parse_mode="HTML"
            )
            return
        
        if uid == target_uid:
            await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å—Å—è —Å–∞–º —Å —Å–æ–±–æ–π!", parse_mode="HTML")
            return

        my_pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": my_pet_id, "user_id": uid})
        if not my_pet:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ —Å —Ç–∞–∫–∏–º ID.", parse_mode="HTML")
            return
        
        # Check if proposer's pet is in arena team
        if await is_pet_in_arena_team(uid, my_pet_id):
            await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–∞-–∫–æ–º–∞–Ω–¥–µ.", parse_mode="HTML")
            return

        target_user_exists = await fetch_one("SELECT user_id FROM users WHERE user_id = $1", {"uid": target_uid})
        if not target_user_exists:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return

        # Store the pending trade
        pending_trades[uid] = {
            'target_uid': target_uid,
            'proposer_pet_id': my_pet_id,
            'proposer_pet_name': my_pet['name'],
            'proposer_pet_rarity': my_pet['rarity']
        }

        # Notify proposer
        try:
            target_chat = await message.bot.get_chat(target_uid)
            target_name = target_chat.first_name if target_chat.first_name else target_chat.full_name
        except Exception:
            target_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_uid}"
        
        await message.answer(
            f"‚úÖ –¢—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–±–º–µ–Ω—è—Ç—å <b>{my_pet['name']}</b> ({my_pet['rarity']}) "
            f"{target_name}.\n"
            f"–û–∂–∏–¥–∞–π –µ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
            parse_mode="HTML"
        )

        # Notify target
        proposer_chat = await message.bot.get_chat(uid)
        proposer_name = proposer_chat.first_name if proposer_chat.first_name else proposer_chat.full_name

        try:
            await message.bot.send_message(
                target_uid,
                f"ü§ù <b>{proposer_name}</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ "
                f"<b>{my_pet['name']}</b> ({my_pet['rarity']}).\n\n"
                f"–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π: <code>/trade accept {uid} &lt;ID —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞&gt;</code>\n"
                f"–ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π: <code>/trade decline {uid}</code>",
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            await message.answer(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{target_name}</b> (ID: {target_uid}). "
                f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –Ω–∏–º.",
                parse_mode="HTML"
            )