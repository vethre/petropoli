from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from db.db import fetch_one, fetch_all, execute_query
import json
import random
import asyncio
from aiogram.exceptions import TelegramBadRequest

router = Router()

arena_queue = []

RANKS = [
    (0, "–ù–æ–≤–∏—á–æ–∫"),
    (3, "–£—á–µ–Ω–∏–∫"),
    (7, "–ë–æ–µ—Ü"),
    (15, "–í–µ—Ç–µ—Ä–∞–Ω"),
    (25, "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä"),
    (40, "–ß–µ–º–ø–∏–æ–Ω"),
    (60, "–ó–≤–µ–∑–¥–∞ –ê—Ä–µ–Ω—ã"),
    (90, "–õ–µ–≥–µ–Ω–¥–∞"),
]

def get_rank(wins):
    for threshold, title in reversed(RANKS):
        if wins >= threshold:
            return title
    return "–ù–æ–≤–∏—á–æ–∫"

def calculate_power(team):
    return sum(p["stats"]["atk"] + p["stats"]["def"] + p["stats"]["hp"] for p in team)

# ‚Äî‚Äî‚Äî /team ‚Äî –ø–æ–∫–∞–∑ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
@router.message(Command("team"))
async def set_or_show_team(message: Message):
    uid = message.from_user.id
    args = message.text.strip().split()[1:]

    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})
    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    all_pets = await fetch_all("SELECT * FROM pets WHERE user_id = $1", {"uid": uid})
    pet_ids = [p["id"] for p in all_pets]

    if not args:
        current_team = json.loads(user.get("active_arena_team", "[]"))
        if not current_team:
            await message.answer("‚öî –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞—Ä–µ–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π <code>/team id1 id2 ...</code>")
            return

        text = "üèüÔ∏è <b>–¢–≤–æ—è –∞—Ä–µ–Ω–∞-–∫–æ–º–∞–Ω–¥–∞</b>\n\n"
        for idx, pet_id in enumerate(current_team, 1):
            pet = next((p for p in all_pets if p["id"] == pet_id), None)
            if pet:
                stats = pet["stats"] if isinstance(pet["stats"], dict) else json.loads(pet["stats"])
                text += (
                    f"üêæ <b>#{idx}</b> {pet['name']} ({pet['rarity']} | {pet['class']})\n"
                    f"‚öî –ê—Ç–∞–∫–∞: {stats['atk']} | üõ° –ó–∞—â–∏—Ç–∞: {stats['def']} | ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {stats['hp']}\n"
                    f"üÜî ID: <code>{pet_id}</code>\n\n"
                )
        await message.answer(text)
    else:
        try:
            new_team = list(map(int, args))
        except ValueError:
            await message.answer("‚ö† –í—Å–µ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return

        if len(new_team) > 5:
            await message.answer("‚ö† –ú–∞–∫—Å–∏–º—É–º 5 –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∞—Ä–µ–Ω–µ.")
            return

        if any(pet_id not in pet_ids for pet_id in new_team):
            await message.answer("‚ö† –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ç–µ–±–µ.")
            return

        await execute_query("UPDATE users SET active_arena_team = $1 WHERE user_id = $2", {
            "active_arena_team": json.dumps(new_team),
            "uid": uid,
        })

        existing_team = await fetch_one("SELECT * FROM arena_team WHERE user_id = $1", {"uid": uid})
        if existing_team:
            await execute_query("UPDATE arena_team SET pet_ids = $1 WHERE user_id = $2", {
                "pet_ids": json.dumps(new_team),
                "uid": uid
            })
        else:
            await execute_query(
                "INSERT INTO arena_team (user_id, pet_ids) VALUES ($1, $2)",
                {"user_id": uid, "pet_ids": json.dumps(new_team)}
            )

        await message.answer(f"‚úÖ –¢–≤–æ—è –∞—Ä–µ–Ω–∞-–∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n–ü–∏—Ç–æ–º—Ü—ã: {', '.join(map(str, new_team))}")


async def fetch_team(uid):
    team_data = await fetch_one("SELECT * FROM arena_team WHERE user_id = $1", {"uid": uid})
    if not team_data:
        return None
    pet_ids = json.loads(team_data["pet_ids"])
    pets = []
    for pid in pet_ids:
        pet = await fetch_one("SELECT * FROM pets WHERE id = $1 AND user_id = $2", {"id": pid, "uid": uid})
        if pet:
            pet = dict(pet)
            pet["stats"] = pet["stats"] if isinstance(pet["stats"], dict) else json.loads(pet["stats"])
            pets.append(pet)
    return pets

@router.message(Command("join_arena"))
async def join_arena(message: Message):
    uid = message.from_user.id
    if uid in arena_queue:
        await message.answer("‚è≥ –¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∞—Ä–µ–Ω—É.")
        return
    arena_queue.append(uid)
    await message.answer("‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞—Ä–µ–Ω—É! –û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –±–∏—Ç–≤—ã...")

    if len(arena_queue) == 1:
        await asyncio.sleep(30)
        if not arena_queue:
            return
        players = arena_queue.copy()
        arena_queue.clear()

        random.shuffle(players)
        pairs = []

        while len(players) >= 2:
            a, b = players.pop(), players.pop()
            pairs.append((a, b))
        if players:
            pairs.append((players[0], None)) # If there's an odd number, the last player fights a bot

        for p1, p2 in pairs:
            await run_battle(message, p1, p2)

async def run_battle(message: Message, uid1, uid2):
    team1 = await fetch_team(uid1)
    if not team1:
        await message.bot.send_message(uid1, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞—Ä–µ–Ω—ã. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é /team.")
        return

    user1 = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid1})
    try:
        chat = await message.bot.get_chat(uid1)
        # Use first_name for a more personal touch
        name1 = chat.first_name if chat.first_name else chat.full_name
    except Exception:
        name1 = f"–ò–≥—Ä–æ–∫ {uid1}"

    power1 = calculate_power(team1)

    fake_names = [
        "–ú–∞–∫–∞–Ω", "Lisa228", "–í–∞—Å—è_–ù–∞–≥–∏–±–∞—Ç–æ—Ä", "–ß–æ—Ç–∫–∏–π–ü–∞—Ü–∞–Ω", "–ë—É–±–ª–∏–∫_–¢–æ–ø",
        "–ö–æ—Ç—è_–ú—É—Ä", "–ë–µ–±—Ä–æ—á–∫–∞", "–°–º–µ—à–∞—Ä–∏–∫_2007", "–•—Ä—É—â–µ–≤_–ë–æ—Å—Å", "–ì—Ä—É—Å—Ç–Ω—ã–π_–ï–∂",
        "–ü–ª—é—à–µ–≤—ã–π_–ú–∏—à–∫–∞", "–ö—É–ø–∏_–î–∂–∏–Ω—Å—ã", "–ë–∞—Ç—è–í–ó–¥–∞–Ω–∏–∏", "–ê–£–§", "–õ–µ–≥–µ–Ω–¥–∞_–†–∞–π–æ–Ω–∞",
        "–ö–∏–±–µ—Ä–ö–æ—Ç–ª–µ—Ç–∞", "–®–∞—à–ª—ã—á–æ–∫_–¢–í", "–ú–µ–º–Ω—ã–π–õ–æ—Ä–¥", "–¢–∏–≥—Ä_–î—ç–Ω", "–î–∏–º–æ–Ω_–õ–∏–º–æ–Ω",
        "–°–æ—á–Ω—ã–π_–ü–µ—Ä—Å–∏–∫", "–û–≥—É—Ä—á–∏–∫", "–ö–µ–ü–∞–ü–∞", "–ì–æ–ø–Ω–∏–∫_PRO",
        "–ù–µ–¢–≤–æ–π–ë—Ä–æ", "–•–∞–≥–∏–í–∞–≥–∏", "–®—Ä–µ–∫_–ù–∞–≥–∏–±–∞—Ç–æ—Ä", "–≠—â–∫–µ—Ä–µ", "–ó–∞–ë–∞–∑—É–û—Ç–≤–µ—á–∞—é",
        "–•–æ–ª–æ–¥–Ω—ã–π_–ß–∞–π", "–ö—Ä–∏–Ω–∂_–ë–æ—Å—Å", "–ß–∏–∫–∏–ë—Ä–∏–∫–∏", "–°–ò–ú–ü–õ_–î–ò–ú–ü–õ", "–ü–æ–ü–æ–ü–∏—Ç—å",
        "–ì—Ä—É—à–∞_–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å", "–ë–∏–±–∞–ò–ë–æ–±–∞", "–ñ–∏–∑–∞_–ë—Ä–æ", "–ï—à–∫–∞_–ö–æ—à–∫–∞", "–ê–±–æ–±—É—Å",
        "MoonLight", "Dreamer", "ShadowHunter", "Astra", "Zenith",
        "Echo", "MysticFlow", "Vesper", "Aurora", "Phantom",
        "–ö—Ä–∏—Å—Ç–∏–Ω–∞", "–ê—Ä—Ç–µ–º", "–°–æ—Ñ–∏—è", "–î–∞–Ω–∏–∏–ª", "–ê–ª–∏–Ω–∞",
        "SkyWalker", "PixelGuru", "ByteMe", "CodeBreaker", "DataMiner",
        "CosmicRay", "StarGazer", "Nova", "GalacticCore", "QuantumLeap",
        "–ì–ª–µ–±", "–í–µ—Ä–æ–Ω–∏–∫–∞", "–ü–ª–∞—Ç–æ–Ω", "–ú–∏–ª–∞–Ω–∞", "–Ø—Ä–æ—Å–ª–∞–≤",
        "SilentKiller", "GhostBlade", "NightRaven", "IronHeart", "StormRider"
    ]

    if uid2:
        team2 = await fetch_team(uid2)
        if not team2:
            await message.bot.send_message(uid2, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞—Ä–µ–Ω—ã. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é /team.")
            return
        user2 = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid2})
        try:
            chat = await message.bot.get_chat(uid2)
            # Use first_name for consistency
            name2 = chat.first_name if chat.first_name else chat.full_name
        except Exception:
            name2 = f"–ò–≥—Ä–æ–∫ {uid2}"

        power2 = calculate_power(team2)
        is_bot = False
    else:
        # Generate bot team with power relative to player's power
        avg_pet_power = power1 / len(team1)
        num_bot_pets = random.randint(max(1, len(team1) - 1), min(5, len(team1) + 1))
        
        team2 = []
        for _ in range(num_bot_pets):
            # Adjust stats based on average pet power of the player's team
            base_atk = max(1, int(avg_pet_power * random.uniform(0.7, 1.3) / 3))
            base_def = max(1, int(avg_pet_power * random.uniform(0.7, 1.3) / 3))
            base_hp = max(1, int(avg_pet_power * random.uniform(0.7, 1.3) / 3))
            
            team2.append({
                "name": random.choice(["–ö–æ—Ç", "–ü—ë—Å", "–õ–∏—Å–∞", "–ë–æ–±—Ä", "–î—Ä–∞–∫–æ–Ω", "–í–æ–ª–∫", "–ú–µ–¥–≤–µ–¥—å", "–ü–∞–Ω—Ç–µ—Ä–∞", "–û—Ä–µ–ª", "–ó–º–µ—è"]),
                "stats": {
                    "atk": max(5, base_atk + random.randint(-2, 2)),
                    "def": max(5, base_def + random.randint(-2, 2)),
                    "hp": max(15, base_hp + random.randint(-5, 5))
                }
            })

        name2 = random.choice(fake_names)
        power2 = calculate_power(team2)
        is_bot = True

    msg = await send_battle_intro(message, name1, power1, name2, power2)

    wins1, wins2 = 0, 0
    
    # Determine the number of rounds based on the smaller team size
    num_rounds = min(len(team1), len(team2))

    for i in range(num_rounds):
        p1_pet = team1[i]
        p2_pet = team2[i]
        
        current_round_log = f"<b>–†–∞—É–Ω–¥ {i+1}:</b>\nüêæ {name1}'s {p1_pet['name']} (ATK: {p1_pet['stats']['atk']}) VS {name2}'s {p2_pet['name']} (DEF: {p2_pet['stats']['def']})\n"

        # Player 1's pet attacks Player 2's pet
        crit_p1 = random.random() < 0.15
        miss_p1 = random.random() < 0.1

        if miss_p1:
            current_round_log += f"‚ùå {name1}'s {p1_pet['name']} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –ø–æ {p2_pet['name']}!\n"
            winner_round_p1 = False
        elif p1_pet["stats"]["atk"] > p2_pet["stats"]["def"] or crit_p1:
            if crit_p1:
                current_round_log += f"üí• {name1}'s {p1_pet['name']} –Ω–∞–Ω–æ—Å–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –ø–æ {p2_pet['name']}!\n"
            else:
                current_round_log += f"‚úÖ {name1}'s {p1_pet['name']} –ø—Ä–æ–±–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É {p2_pet['name']}!\n"
            winner_round_p1 = True
        else:
            current_round_log += f"üõ° {name2}'s {p2_pet['name']} –æ—Ç–±–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É {p1_pet['name']}!\n"
            winner_round_p1 = False

        # Player 2's pet attacks Player 1's pet (if player 1 didn't miss)
        crit_p2 = random.random() < 0.15
        miss_p2 = random.random() < 0.1
        
        if miss_p2:
            current_round_log += f"‚ùå {name2}'s {p2_pet['name']} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –ø–æ {p1_pet['name']}!\n"
            winner_round_p2 = False
        elif p2_pet["stats"]["atk"] > p1_pet["stats"]["def"] or crit_p2:
            if crit_p2:
                current_round_log += f"üí• {name2}'s {p2_pet['name']} –Ω–∞–Ω–æ—Å–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –ø–æ {p1_pet['name']}!\n"
            else:
                current_round_log += f"‚úÖ {name2}'s {p2_pet['name']} –ø—Ä–æ–±–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É {p1_pet['name']}!\n"
            winner_round_p2 = True
        else:
            current_round_log += f"üõ° {name1}'s {p1_pet['name']} –æ—Ç–±–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É {p2_pet['name']}!\n"
            winner_round_p2 = False

        # Determine round winner based on combined outcomes
        if winner_round_p1 and not winner_round_p2:
            wins1 += 1
            current_round_log += f"‚û°Ô∏è {name1}'s {p1_pet['name']} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ä–∞—É–Ω–¥!\n"
        elif winner_round_p2 and not winner_round_p1:
            wins2 += 1
            current_round_log += f"‚û°Ô∏è {name2}'s {p2_pet['name']} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ä–∞—É–Ω–¥!\n"
        elif winner_round_p1 and winner_round_p2:
            current_round_log += "‚û°Ô∏è –û–±–∞ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞–Ω–µ—Å–ª–∏ —É—Ä–æ–Ω! –ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ.\n" # Both hit, considered a draw for this round's win count
        else:
            current_round_log += "‚û°Ô∏è –û–±–∞ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω! –ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ.\n" # Both missed or were defended, considered a draw for this round's win count

        try:
            await msg.edit_text(f"{msg.text}\n\n{current_round_log}", parse_mode="HTML")
        except TelegramBadRequest as e:
            # Handle the case where the message content is identical
            if "message is not modified" not in str(e):
                raise
        await asyncio.sleep(2.3) # Increased sleep for better readability of battle log

    if wins1 > wins2:
        await execute_query("UPDATE arena_team SET wins = wins + 1 WHERE user_id = $1", {"uid": uid1})
        result_text = f"üèÜ <b>{name1}</b> –æ–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–±–µ–¥—É!"
        if not is_bot:
            await execute_query("UPDATE arena_team SET losses = losses + 1 WHERE user_id = $1", {"uid": uid2})
    elif wins2 > wins1:
        await execute_query("UPDATE arena_team SET losses = losses + 1 WHERE user_id = $1", {"uid": uid1})
        result_text = f"üíÄ <b>{name2}</b> –æ–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–±–µ–¥—É!"
        if not is_bot:
            await execute_query("UPDATE arena_team SET wins = wins + 1 WHERE user_id = $1", {"uid": uid2})
    else:
        result_text = "ü§ù <b>–ù–∏—á—å—è!</b> –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∏ —Å–µ–±—è –¥–æ—Å—Ç–æ–π–Ω–æ."
        await execute_query("UPDATE arena_team SET draws = draws + 1 WHERE user_id = $1", {"uid": uid1})
        if not is_bot:
            await execute_query("UPDATE arena_team SET draws = draws + 1 WHERE user_id = $1", {"uid": uid2})


    await asyncio.sleep(2)
    try:
        await msg.edit_text(f"{msg.text}\n\n{result_text}", parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

async def send_battle_intro(message: Message, name1: str, power1: int, name2: str, power2: int):
    text = (
        f"‚öîÔ∏è <b>–ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n"
        f"üë§ {name1} ‚Äî –°–∏–ª–∞: {power1}\n"
        f"üÜö\n"
        f"üë§ {name2} ‚Äî –°–∏–ª–∞: {power2}"
    )
    return await message.answer(text, parse_mode="HTML")

@router.message(Command("arena_info"))
async def arena_info(message: Message):
    uid = message.from_user.id

    user = await fetch_one("SELECT * FROM arena_team WHERE user_id = $1", {"uid": uid})
    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∞—Ä–µ–Ω–µ. –ù–∞–ø–∏—à–∏ /team —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        chat = await message.bot.get_chat(uid)
        username = chat.username or chat.full_name
    except Exception:
        username = f"user{uid}"
    
    wins = user.get("wins", 0)
    losses = user.get("losses", 0)
    draws = user.get("draws", 0) # Added draws
    rank = get_rank(wins)

    top_users = await fetch_all("""
        SELECT u.user_id, a.wins, a.losses, a.draws FROM arena_team a
        JOIN users u ON u.user_id = a.user_id
        WHERE u.user_id != 0
        ORDER BY a.wins DESC, a.draws DESC, a.losses ASC
        LIMIT 10
    """)

    leaderboard = ""
    for idx, u in enumerate(top_users):
        try:
            chat = await message.bot.get_chat(u["user_id"])
            uname = chat.username or f"user{u['user_id']}"
        except Exception:
            uname = f"user{u['user_id']}"
        leaderboard += f"{idx+1}. {uname} ‚Äî üèÜ {u['wins']} | üíÄ {u['losses']} | ü§ù {u['draws']}\n" # Added draws

    if not leaderboard:
        leaderboard = "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç..."

    text = (
        f"üèüÔ∏è <b>–ê—Ä–µ–Ω–∞: —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞</b>\n\n"
        f"üë§ –ò–≥—Ä–æ–∫: <b>{username}</b>\n"
        f"üî∞ –†–∞–Ω–≥: <b>{rank}</b>\n"
        f"üèÜ –ü–æ–±–µ–¥—ã: <b>{wins}</b>\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏—è: <b>{losses}</b>\n"
        f"ü§ù –ù–∏—á—å–∏: <b>{draws}</b>\n\n" # Added draws
        f"<b>üìä –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n{leaderboard}"
    )

    await message.answer(text, parse_mode="HTML")