# bot/handlers/dungeon.py

import asyncio
import random
import json
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.utils.pet_generator import EGG_TYPES
from db.db import fetch_one, fetch_all, execute_query
from bot.handlers.eggs import create_pet_and_save # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
from bot.handlers.explore import MAX_ENERGY, recalculate_energy, update_user_energy, simulate_battle # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –±–æ—è

router = Router()

MONSTERS = {
    "–ª–µ—Å–Ω–æ–π_–≤–æ–ª–∫": {
        "name_ru": "–õ–µ—Å–Ω–æ–π –í–æ–ª–∫",
        "hp": 50,
        "atk": 15,
        "def": 10,
        "xp_reward": 20,
        "coin_reward": 30,
        "abilities": ["–ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞"] # –ü—Ä–∏–º–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    },
    "–¥—Ä–µ–≤–µ—Å–Ω—ã–π_–≥–æ–ª–µ–º": {
        "name_ru": "–î—Ä–µ–≤–µ—Å–Ω—ã–π –ì–æ–ª–µ–º",
        "hp": 80,
        "atk": 10,
        "def": 25,
        "xp_reward": 35,
        "coin_reward": 45,
        "abilities": ["–ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞"]
    },
    "–æ–≥–Ω–µ–Ω–Ω—ã–π_—ç–ª–µ–º–µ–Ω—Ç–∞–ª—å": {
        "name_ru": "–û–≥–Ω–µ–Ω–Ω—ã–π –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å",
        "hp": 70,
        "atk": 25,
        "def": 15,
        "xp_reward": 40,
        "coin_reward": 50,
        "abilities": ["–ì–æ—Ä—è—â–∞—è –∞—É—Ä–∞"]
    },
    "–ª–∞–≤–æ–≤—ã–π_–≥–æ–±–ª–∏–Ω": {
        "name_ru": "–õ–∞–≤–æ–≤—ã–π –ì–æ–±–ª–∏–Ω",
        "hp": 60,
        "atk": 20,
        "def": 10,
        "xp_reward": 30,
        "coin_reward": 35,
        "abilities": ["–í–∑—Ä—ã–≤–Ω–æ–π —É–¥–∞—Ä"]
    },
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –º–æ–Ω—Å—Ç—Ä–æ–≤
    "–¥—Ä–µ–≤–Ω–∏–π_–∑–≤–µ—Ä—å": {
        "name_ru": "–î—Ä–µ–≤–Ω–∏–π –ó–≤–µ—Ä—å",
        "hp": 120,
        "atk": 30,
        "def": 20,
        "xp_reward": 70,
        "coin_reward": 90,
        "abilities": ["–Ø—Ä–æ—Å—Ç–Ω—ã–π —Ä–µ–≤"]
    },
    "–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å_–æ–≥–Ω—è": {
        "name_ru": "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –û–≥–Ω—è",
        "hp": 150,
        "atk": 40,
        "def": 25,
        "xp_reward": 100,
        "coin_reward": 120,
        "abilities": ["–ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å", "–û–≥–Ω–µ–Ω–Ω—ã–π —â–∏—Ç"]
    }
}

# Dungeon Definitions
DUNGEONS = {
    "–ª–µ—Å–Ω–æ–µ_–ø–æ–¥–∑–µ–º–µ–ª—å–µ": {
        "name_ru": "–õ–µ—Å–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
        "description": "–°–ª–æ–∂–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –∫–∏—à–∞—â–µ–µ –æ–ø–∞—Å–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏. –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –î–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —è–π—Ü–æ.",
        "difficulty_level": 5, # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∏—Ç–æ–º—Ü–∞/–∫–æ–º–∞–Ω–¥—ã
        "reward_egg_type": "–¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ",
        "entry_cost_energy": 50,
        "min_pets_required": 1,
        "duration_min": 5, # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ–º
        "duration_max": 10, # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ–º
        "monster_pool": ["–ª–µ—Å–Ω–æ–π_–≤–æ–ª–∫", "–¥—Ä–µ–≤–µ—Å–Ω—ã–π_–≥–æ–ª–µ–º"], # –ú–æ–Ω—Å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è
        "num_encounters": 2, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–µ–≤ –≤ –¥–∞–Ω–∂–µ
        "boss_monster": None # –ü–æ–∫–∞ –Ω–µ—Ç –±–æ—Å—Å–∞, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    },
    "–æ–≥–Ω–µ–Ω–Ω–∞—è_–ø–µ—â–µ—Ä–∞": {
        "name_ru": "–û–≥–Ω–µ–Ω–Ω–∞—è –ø–µ—â–µ—Ä–∞",
        "description": "–†–∞—Å–∫–∞–ª–µ–Ω–Ω–∞—è –ø–µ—â–µ—Ä–∞ —Å –¥—Ä–µ–≤–Ω–∏–º–∏ –¥—É—Ö–∞–º–∏ –æ–≥–Ω—è. –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –§–∞–±–µ—Ä–∂–µ —è–π—Ü–æ.",
        "difficulty_level": 10,
        "reward_egg_type": "—Ñ–∞–±–µ—Ä–∂–µ",
        "entry_cost_energy": 80,
        "min_pets_required": 2,
        "duration_min": 10,
        "duration_max": 20,
        "monster_pool": ["–æ–≥–Ω–µ–Ω–Ω—ã–π_—ç–ª–µ–º–µ–Ω—Ç–∞–ª—å", "–ª–∞–≤–æ–≤—ã–π_–≥–æ–±–ª–∏–Ω"],
        "num_encounters": 3,
        "boss_monster": "–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å_–æ–≥–Ω—è" # –ü—Ä–∏–º–µ—Ä –±–æ—Å—Å–∞
    }
}

# --- FSM States ---
class DungeonState(StatesGroup):
    choosing_dungeon = State()
    choosing_pets = State()
    in_dungeon_progress = State() # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞–Ω–∂–∞

# --- Dungeon Commands ---

@router.message(Command("dungeon"))
async def dungeon_start_cmd(message: Message, state: FSMContext):
    uid = message.from_user.id
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})

    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start!")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    await state.clear() 
    
    builder = InlineKeyboardBuilder()
    menu_text = "üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:\n\n"
    for dungeon_key, dungeon_info in DUNGEONS.items():
        menu_text += (
            f"<b>{dungeon_info['name_ru']}</b>:\n"
            f"  <i>{dungeon_info['description']}</i>\n"
            f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {dungeon_info['difficulty_level']}\n"
            f"  –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: {dungeon_info['entry_cost_energy']}\n"
            f"  –ú–∏–Ω. –ø–∏—Ç–æ–º—Ü–µ–≤: {dungeon_info['min_pets_required']}\n\n"
        )
        builder.button(text=dungeon_info['name_ru'], callback_data=f"select_dungeon_{dungeon_key}")
    builder.adjust(1) # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫

    await message.answer(menu_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(DungeonState.choosing_dungeon) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–∂–∞


@router.callback_query(F.data.startswith("select_dungeon_"), StateFilter(DungeonState.choosing_dungeon))
async def select_dungeon_callback(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    dungeon_key = callback.data.split("select_dungeon_")[1]
    dungeon_info = DUNGEONS.get(dungeon_key)

    if not dungeon_info:
        await callback.message.edit_text("–ü–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —ç—Ç–æ—Ç —ç—Ç–∞–ø)
    current_energy = await recalculate_energy(uid)
    if current_energy < dungeon_info['entry_cost_energy']:
        await callback.message.edit_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ <b>{dungeon_info['name_ru']}</b>.\n"
            f"–ù—É–∂–Ω–æ {dungeon_info['entry_cost_energy']} —ç–Ω–µ—Ä–≥–∏–∏, —É —Ç–µ–±—è {current_energy}/{MAX_ENERGY}.",
            parse_mode="HTML"
        )
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–ª—å–∑—è –≤–æ–π—Ç–∏
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∞–Ω–∂ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(selected_dungeon_key=dungeon_key)

    user_pets_db = await fetch_all("SELECT id, name, level, rarity FROM pets WHERE user_id = $1 ORDER BY level DESC, rarity DESC", {"uid": uid})
    
    if not user_pets_db:
        await callback.message.edit_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /buy_egg –∏ /hatch.")
        await state.clear()
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
    builder = InlineKeyboardBuilder()
    selected_pets_ids = [] # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    data = await state.get_data()
    if 'selected_pets_ids' in data:
        selected_pets_ids = data['selected_pets_ids']

    for pet in user_pets_db:
        is_selected = pet['id'] in selected_pets_ids
        button_text = f"‚úÖ {pet['name']} (–£—Ä. {pet['level']})" if is_selected else f"‚òê {pet['name']} (–£—Ä. {pet['level']})"
        builder.button(text=button_text, callback_data=f"toggle_pet_{pet['id']}")

    builder.adjust(2) # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ø–æ—Ö–æ–¥" –∏ "–û—Ç–º–µ–Ω–∞"
    builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ—Ö–æ–¥", callback_data="start_dungeon"))
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_dungeon"))

    pet_list_text = "\n".join([f"ID {pet['id']} ‚Äî {pet['name']} ({pet['rarity']}, –£—Ä. {pet['level']})" for pet in user_pets_db])

    await callback.message.edit_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª –ø–æ–¥–∑–µ–º–µ–ª—å–µ <b>{dungeon_info['name_ru']}</b>.\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {dungeon_info['difficulty_level']}, –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: {dungeon_info['entry_cost_energy']}\n\n"
        f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {dungeon_info['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ): \n{pet_list_text}\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(DungeonState.choosing_pets) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_pet_"), StateFilter(DungeonState.choosing_pets))
async def toggle_pet_selection_callback(callback: CallbackQuery, state: FSMContext):
    pet_id = int(callback.data.split("toggle_pet_")[1])
    data = await state.get_data()
    selected_pets_ids = data.get('selected_pets_ids', [])
    
    user_pets_db = await fetch_all("SELECT id, name, level, rarity FROM pets WHERE user_id = $1 ORDER BY level DESC, rarity DESC", {"uid": callback.from_user.id})

    if pet_id in selected_pets_ids:
        selected_pets_ids.remove(pet_id)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∏—Ç–æ–º–µ—Ü —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if any(pet['id'] == pet_id for pet in user_pets_db):
            selected_pets_ids.append(pet_id)
    
    await state.update_data(selected_pets_ids=selected_pets_ids)
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    builder = InlineKeyboardBuilder()
    for pet in user_pets_db:
        is_selected = pet['id'] in selected_pets_ids
        button_text = f"‚úÖ {pet['name']} (–£—Ä. {pet['level']})" if is_selected else f"‚òê {pet['name']} (–£—Ä. {pet['level']})"
        builder.button(text=button_text, callback_data=f"toggle_pet_{pet['id']}")
    builder.adjust(2)

    builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ—Ö–æ–¥", callback_data="start_dungeon"))
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_dungeon"))

    pet_list_text = "\n".join([f"ID {pet['id']} ‚Äî {pet['name']} ({pet['rarity']}, –£—Ä. {pet['level']})" for pet in user_pets_db])

    await callback.message.edit_text(
        f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {DUNGEONS[data['selected_dungeon_key']]['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ):\n{pet_list_text}\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "start_dungeon", StateFilter(DungeonState.choosing_pets))
async def start_dungeon_callback(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    data = await state.get_data()
    selected_dungeon_key = data.get('selected_dungeon_key')
    selected_pets_ids = data.get('selected_pets_ids', [])

    if not selected_dungeon_key:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /dungeon –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        await callback.answer()
        return

    dungeon_info = DUNGEONS.get(selected_dungeon_key)
    if not dungeon_info:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        await callback.answer()
        return

    if len(selected_pets_ids) < dungeon_info['min_pets_required']:
        await callback.message.answer(f"–î–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∑–µ–º–µ–ª—å—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º {dungeon_info['min_pets_required']} –ø–∏—Ç–æ–º—Ü–µ–≤. –í—ã–±—Ä–∞–Ω–æ: {len(selected_pets_ids)}.")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞—Ö
    selected_pets_data = []
    for pet_id in selected_pets_ids:
        pet = await fetch_one("SELECT id, name, level, stats, class, rarity FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": uid})
        if pet:
            pet['stats'] = json.loads(pet['stats']) # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—ã
            selected_pets_data.append(pet)
    
    if len(selected_pets_data) < dungeon_info['min_pets_required']:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –µ—â–µ —Ä–∞–∑ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–≥–æ –≤—ã–±–∏—Ä–∞–ª)
    current_energy = await recalculate_energy(uid)
    if current_energy < dungeon_info['entry_cost_energy']:
        await callback.message.edit_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ <b>{dungeon_info['name_ru']}</b>.\n"
            f"–ù—É–∂–Ω–æ {dungeon_info['entry_cost_energy']} —ç–Ω–µ—Ä–≥–∏–∏, —É —Ç–µ–±—è {current_energy}/{MAX_ENERGY}.",
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()
        return
    
    # –í—ã—á–∏—Ç–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
    await update_user_energy(uid, current_energy - dungeon_info['entry_cost_energy'])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–∞–Ω–∂–µ –∏ –ø–∏—Ç–æ–º—Ü–∞—Ö
    await state.update_data(
        current_dungeon_key=selected_dungeon_key,
        current_pets_data=selected_pets_data,
        current_encounter_index=0, # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –¥–∞–Ω–∂–µ
        dungeon_total_xp = 0,
        dungeon_total_coins = 0
    )
    await state.set_state(DungeonState.in_dungeon_progress)

    await callback.message.edit_text(f"üó∫Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ <b>{dungeon_info['name_ru']}</b>!\n"
                                     f"–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—é!",
                                     parse_mode="HTML")
    await callback.answer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–∞–Ω–∂–∞
    await simulate_dungeon_progress(callback.message, uid, state)


@router.callback_query(F.data == "cancel_dungeon", StateFilter(DungeonState.choosing_pets))
async def cancel_dungeon_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã—Ö–æ–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è.")
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()

# --- Dungeon Simulation Logic ---

async def simulate_dungeon_progress(message: Message, user_id: int, state: FSMContext):
    data = await state.get_data()
    dungeon_key = data['current_dungeon_key']
    dungeon_info = DUNGEONS[dungeon_key]
    pets_data = data['current_pets_data']
    encounter_index = data['current_encounter_index']
    dungeon_total_xp = data['dungeon_total_xp']
    dungeon_total_coins = data['dungeon_total_coins']

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—ã—á–∫–∞–º (–º–æ–Ω—Å—Ç—Ä–∞–º)
    num_encounters_to_do = dungeon_info['num_encounters']
    if dungeon_info['boss_monster']:
        num_encounters_to_do += 1 # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Å—Å–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—ã—á–∫—É

    for i in range(encounter_index, num_encounters_to_do):
        if i < dungeon_info['num_encounters']:
            # –û–±—ã—á–Ω—ã–π –º–æ–Ω—Å—Ç—Ä
            monster_key = random.choice(dungeon_info['monster_pool'])
            monster_info = MONSTERS[monster_key]
            current_monster_name = monster_info['name_ru']
            encounter_type = "–ú–æ–Ω—Å—Ç—Ä"
        else:
            # –ë–æ—Å—Å
            monster_key = dungeon_info['boss_monster']
            monster_info = MONSTERS[monster_key]
            current_monster_name = monster_info['name_ru']
            encounter_type = "–ë–û–°–°"

        await message.answer(f"‚ö°Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å <b>{current_monster_name}</b> ({encounter_type})!", parse_mode="HTML")
        await asyncio.sleep(random.uniform(2, 4)) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –±–æ–µ–º

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–π
        battle_result = simulate_battle(pets_data, monster_info)
        
        if battle_result['win']:
            dungeon_total_xp += battle_result['xp_reward']
            dungeon_total_coins += battle_result['coin_reward']
            await message.answer(
                f"üèÜ –ü–æ–±–µ–¥–∞ –Ω–∞–¥ <b>{current_monster_name}</b>!\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ: {battle_result['xp_reward']} XP, {battle_result['coin_reward']} üí∞"
                f"\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–Ω–∂–∞: {i + 1}/{num_encounters_to_do} —Å—Ç—ã—á–µ–∫."
                f"\n–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –¥–∞–Ω–∂–µ: {dungeon_total_xp} XP, {dungeon_total_coins} üí∞",
                parse_mode="HTML"
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º XP –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –ë–î –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–±–µ–¥—ã
            for pet in pets_data:
                await execute_query("UPDATE pets SET xp = xp + $1 WHERE id = $2", {"xp_reward": battle_result['xp_reward'], "pet_id": pet['id']})
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ä–æ–≤–Ω—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–¥–µ—Å—å –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            await state.update_data(
                current_encounter_index=i + 1,
                dungeon_total_xp=dungeon_total_xp,
                dungeon_total_coins=dungeon_total_coins
            )

        else:
            await message.answer(
                f"üíÄ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Ç–µ—Ä–ø–µ–ª–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç <b>{current_monster_name}</b>. –ü–æ—Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω!\n"
                f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {dungeon_total_xp} XP, {dungeon_total_coins} üí∞ (–¥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è).",
                parse_mode="HTML"
            )
            await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            return

        await asyncio.sleep(random.uniform(2, 5)) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—ã—á–∫–∞–º–∏

    # --- –î–∞–Ω–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω ---
    reward_egg_type_key = dungeon_info['reward_egg_type']
    reward_egg_info = EGG_TYPES.get(reward_egg_type_key)

    # –î–æ–±–∞–≤–ª—è–µ–º —è–π—Ü–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data_for_eggs = await fetch_one("SELECT eggs FROM users WHERE user_id = $1 FOR UPDATE", {"uid": user_id})
    current_eggs = json.loads(user_data_for_eggs['eggs']) if user_data_for_eggs['eggs'] else []

    new_egg_record = {
        "type": reward_egg_type_key,
        "obtained_at": datetime.utcnow().isoformat(),
        "source": dungeon_info['name_ru']
    }
    current_eggs.append(new_egg_record)

    await execute_query("UPDATE users SET eggs = $1, coins = coins + $2 WHERE user_id = $3", 
                        {"eggs": json.dumps(current_eggs), "coins": dungeon_total_coins, "uid": user_id})
    
    await message.answer(
        f"üéâ <b>–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ {dungeon_info['name_ru']}</b>!\n"
        f"–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: <b>{dungeon_total_xp} XP</b> –∏ <b>{dungeon_total_coins} üí∞</b>.\n"
        f"–í –Ω–∞–≥—Ä–∞–¥—É —Ç—ã –ø–æ–ª—É—á–∏–ª <b>{reward_egg_info['name_ru']}</b>!\n"
        f"–ù–∞–ø–∏—à–∏ /hatch, —á—Ç–æ–±—ã –≤—ã–ª—É–ø–∏—Ç—å –µ–≥–æ!\n"
        f"\n–¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: {await recalculate_energy(user_id)}/{MAX_ENERGY}",
        parse_mode="HTML"
    )
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∞–Ω–∂–∞