# bot/handlers/dungeon.py

import asyncio
import random
import json
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

from bot.utils.pet_generator import EGG_TYPES
from db.db import fetch_one, fetch_all, execute_query
from bot.handlers.eggs import create_pet_and_save # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
from bot.handlers.explore import MAX_ENERGY, recalculate_energy, update_user_energy_db # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
from bot.utils.battle_system import simulate_battle_dungeon # <--- –ò–ú–ü–û–†–¢ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò

router = Router()

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ë–ê–õ–ê–ù–°–ê ---
BASE_MONSTER_HP_PER_DIFFICULTY = 10 # –ë–∞–∑–æ–≤–æ–µ HP –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
BASE_MONSTER_ATK_PER_DIFFICULTY = 3 # –ë–∞–∑–æ–≤–∞—è –ê—Ç–∞–∫–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
BASE_MONSTER_DEF_PER_DIFFICULTY = 2 # –ë–∞–∑–æ–≤–∞—è –ó–∞—â–∏—Ç–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
BASE_MONSTER_XP_PER_DIFFICULTY = 5 # –ë–∞–∑–æ–≤—ã–π XP –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
BASE_MONSTER_COINS_PER_DIFFICULTY = 7 # –ë–∞–∑–æ–≤—ã–µ –ú–æ–Ω–µ—Ç—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

BOSS_MULTIPLIER_HP = 2.0 # –ë–æ—Å—Å –∏–º–µ–µ—Ç –≤ X —Ä–∞–∑ –±–æ–ª—å—à–µ HP
BOSS_MULTIPLIER_ATK = 1.5 # –ë–æ—Å—Å –∏–º–µ–µ—Ç –≤ X —Ä–∞–∑ –±–æ–ª—å—à–µ ATK
BOSS_MULTIPLIER_DEF = 1.5 # –ë–æ—Å—Å –∏–º–µ–µ—Ç –≤ X —Ä–∞–∑ –±–æ–ª—å—à–µ DEF
BOSS_MULTIPLIER_REWARD = 2.0 # –ë–æ—Å—Å –¥–∞–µ—Ç –≤ X —Ä–∞–∑ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ú–û–ù–°–¢–†–û–í ---
MONSTERS = {
    "–ª–µ—Å–Ω–æ–π_–≤–æ–ª–∫": {
        "name_ru": "–õ–µ—Å–Ω–æ–π –í–æ–ª–∫",
        "base_hp": 30,
        "base_atk": 10,
        "base_def": 5,
        "abilities": ["–ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞"]
    },
    "–¥—Ä–µ–≤–µ—Å–Ω—ã–π_–≥–æ–ª–µ–º": {
        "name_ru": "–î—Ä–µ–≤–µ—Å–Ω—ã–π –ì–æ–ª–µ–º",
        "base_hp": 50,
        "base_atk": 8,
        "base_def": 15,
        "abilities": ["–ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞"]
    },
    "–æ–≥–Ω–µ–Ω–Ω—ã–π_—ç–ª–µ–º–µ–Ω—Ç–∞–ª—å": {
        "name_ru": "–û–≥–Ω–µ–Ω–Ω—ã–π –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å",
        "base_hp": 40,
        "base_atk": 18,
        "base_def": 10,
        "abilities": ["–ì–æ—Ä—è—â–∞—è –∞—É—Ä–∞"]
    },
    "–ª–∞–≤–æ–≤—ã–π_–≥–æ–±–ª–∏–Ω": {
        "name_ru": "–õ–∞–≤–æ–≤—ã–π –ì–æ–±–ª–∏–Ω",
        "base_hp": 35,
        "base_atk": 15,
        "base_def": 7,
        "abilities": ["–í–∑—Ä—ã–≤–Ω–æ–π —É–¥–∞—Ä"]
    },
    "–¥—Ä–µ–≤–Ω–∏–π_–∑–≤–µ—Ä—å": {
        "name_ru": "–î—Ä–µ–≤–Ω–∏–π –ó–≤–µ—Ä—å",
        "base_hp": 80,
        "base_atk": 25,
        "base_def": 15,
        "abilities": ["–Ø—Ä–æ—Å—Ç–Ω—ã–π —Ä–µ–≤"]
    },
    "–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å_–æ–≥–Ω—è": {
        "name_ru": "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –û–≥–Ω—è",
        "base_hp": 100,
        "base_atk": 30,
        "base_def": 20,
        "abilities": ["–ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å", "–û–≥–Ω–µ–Ω–Ω—ã–π —â–∏—Ç"]
    },
    "–ª–µ–¥—è–Ω–æ–π_—Ç—Ä–æ–ª–ª—å": {
        "name_ru": "–õ–µ–¥—è–Ω–æ–π –¢—Ä–æ–ª–ª—å",
        "base_hp": 70,
        "base_atk": 20,
        "base_def": 20,
        "abilities": ["–õ–µ–¥—è–Ω–∞—è –±—Ä–æ–Ω—è"]
    },
    "—Å–Ω–µ–∂–Ω–∞—è_—Ñ—É—Ä–∏—è": {
        "name_ru": "–°–Ω–µ–∂–Ω–∞—è –§—É—Ä–∏—è",
        "base_hp": 60,
        "base_atk": 25,
        "base_def": 12,
        "abilities": ["–ó–∞–º–æ—Ä–æ–∑–∫–∞"]
    },
    "–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π_—Ä—ã—Ü–∞—Ä—å": {
        "name_ru": "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –†—ã—Ü–∞—Ä—å",
        "base_hp": 90,
        "base_atk": 30,
        "base_def": 25,
        "abilities": ["–ù–µ—É–ª–æ–≤–∏–º–æ—Å—Ç—å"]
    },
    "–∫–æ—Ä–æ–ª—å_—Å–∫–µ–ª–µ—Ç–æ–≤": {
        "name_ru": "–ö–æ—Ä–æ–ª—å –°–∫–µ–ª–µ—Ç–æ–≤",
        "base_hp": 120,
        "base_atk": 35,
        "base_def": 30,
        "abilities": ["–í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ"]
    }
}

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–ê–ù–ñ–ï–ô ---
DUNGEONS = {
    "–ª–µ—Å–Ω–æ–µ_–ø–æ–¥–∑–µ–º–µ–ª—å–µ": {
        "name_ru": "–õ–µ—Å–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
        "description": "–°–ª–æ–∂–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –∫–∏—à–∞—â–µ–µ –æ–ø–∞—Å–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏. –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ö—Ä—É—Ç–æ–µ —è–π—Ü–æ.",
        "difficulty_level": 5, # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∏—Ç–æ–º—Ü–∞/–∫–æ–º–∞–Ω–¥—ã
        "reward_egg_type": "–∫—Ä—É—Ç–æ–µ",
        "entry_cost_energy": 50,
        "min_pets_required": 1,
        "duration_min": 5,
        "duration_max": 10,
        "monster_pool": ["–ª–µ—Å–Ω–æ–π_–≤–æ–ª–∫", "–¥—Ä–µ–≤–µ—Å–Ω—ã–π_–≥–æ–ª–µ–º"],
        "num_encounters": 2,
        "boss_monster": None
    },
    "–æ–≥–Ω–µ–Ω–Ω–∞—è_–ø–µ—â–µ—Ä–∞": {
        "name_ru": "–û–≥–Ω–µ–Ω–Ω–∞—è –ø–µ—â–µ—Ä–∞",
        "description": "–†–∞—Å–∫–∞–ª–µ–Ω–Ω–∞—è –ø–µ—â–µ—Ä–∞ —Å –¥—Ä–µ–≤–Ω–∏–º–∏ –¥—É—Ö–∞–º–∏ –æ–≥–Ω—è. –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —è–π—Ü–æ –≤—Å–º—è—Ç–∫—É.",
        "difficulty_level": 10,
        "reward_egg_type": "–≤—Å–º—è—Ç–∫—É",
        "entry_cost_energy": 80,
        "min_pets_required": 2,
        "duration_min": 10,
        "duration_max": 20,
        "monster_pool": ["–æ–≥–Ω–µ–Ω–Ω—ã–π_—ç–ª–µ–º–µ–Ω—Ç–∞–ª—å", "–ª–∞–≤–æ–≤—ã–π_–≥–æ–±–ª–∏–Ω"],
        "num_encounters": 3,
        "boss_monster": "–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å_–æ–≥–Ω—è"
    },
    "–ª–µ–¥—è–Ω—ã–µ_–≥–ª—É–±–∏–Ω—ã": {
        "name_ru": "–õ–µ–¥—è–Ω—ã–µ –ì–ª—É–±–∏–Ω—ã",
        "description": "–ó–∞–º–µ—Ä–∑—à–∏–µ –ø–µ—â–µ—Ä—ã, –≥–¥–µ –æ–±–∏—Ç–∞—é—Ç –¥—Ä–µ–≤–Ω–∏–µ –ª–µ–¥—è–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞. –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –î–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ —è–π—Ü–æ.",
        "difficulty_level": 15,
        "reward_egg_type": "–¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ",
        "entry_cost_energy": 120,
        "min_pets_required": 3,
        "duration_min": 15,
        "duration_max": 25,
        "monster_pool": ["–ª–µ–¥—è–Ω–æ–π_—Ç—Ä–æ–ª–ª—å", "—Å–Ω–µ–∂–Ω–∞—è_—Ñ—É—Ä–∏—è", "–¥—Ä–µ–≤–Ω–∏–π_–∑–≤–µ—Ä—å"],
        "num_encounters": 4,
        "boss_monster": "–ª–µ–¥—è–Ω–æ–π_—Ç—Ä–æ–ª–ª—å" # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –∫–∞–∫ –±–æ—Å—Å–∞, –Ω–æ —Å —É—Å–∏–ª–µ–Ω–∏–µ–º
    },
    "–∑–∞–±—ã—Ç—ã–µ_–∫–∞—Ç–∞–∫–æ–º–±—ã": {
        "name_ru": "–ó–∞–±—ã—Ç—ã–µ –ö–∞—Ç–∞–∫–æ–º–±—ã",
        "description": "–¢–µ–º–Ω—ã–µ –∫–∞—Ç–∞–∫–æ–º–±—ã, –ø–æ–ª–Ω—ã–µ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –∏ –Ω–µ–∂–∏—Ç–∏. –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —è–π—Ü–æ –§–∞–±–µ—Ä–∂–µ.",
        "difficulty_level": 20,
        "reward_egg_type": "—Ñ–∞–±–µ—Ä–∂–µ",
        "entry_cost_energy": 150,
        "min_pets_required": 4,
        "duration_min": 20,
        "duration_max": 30,
        "monster_pool": ["–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π_—Ä—ã—Ü–∞—Ä—å", "–∫–æ—Ä–æ–ª—å_—Å–∫–µ–ª–µ—Ç–æ–≤", "–¥—Ä–µ–≤–µ—Å–Ω—ã–π_–≥–æ–ª–µ–º"], # –ú–æ–∂–Ω–æ —Å–º–µ—à–∏–≤–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–æ–≤
        "num_encounters": 5,
        "boss_monster": "–∫–æ—Ä–æ–ª—å_—Å–∫–µ–ª–µ—Ç–æ–≤"
    }
}

# --- FSM States ---
class DungeonState(StatesGroup):
    choosing_dungeon = State()
    choosing_pets = State()
    in_dungeon_progress = State() # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞–Ω–∂–∞

# --- Dungeon Commands ---

@router.message(Command("dungeon"))
async def dungeon_start_cmd(message: Message, state: FSMContext):
    uid = message.from_user.id
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})

    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start!")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    await state.clear() 
    
    builder = InlineKeyboardBuilder()
    menu_text = "üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:\n\n"
    for dungeon_key, dungeon_info in DUNGEONS.items():
        menu_text += (
            f"<b>{dungeon_info['name_ru']}</b>:\n"
            f"  <i>{dungeon_info['description']}</i>\n"
            f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {dungeon_info['difficulty_level']}\n"
            f"  –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: {dungeon_info['entry_cost_energy']}\n"
            f"  –ú–∏–Ω. –ø–∏—Ç–æ–º—Ü–µ–≤: {dungeon_info['min_pets_required']}\n\n"
        )
        builder.button(text=dungeon_info['name_ru'], callback_data=f"select_dungeon_{dungeon_key}")
    builder.adjust(1) # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫

    sent_message = await message.answer(menu_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.update_data(menu_message_id=sent_message.message_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(DungeonState.choosing_dungeon) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–∂–∞
    # await asyncio.sleep(random.uniform(0.5, 1.0)) # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –∫–æ–ª–ª–±—ç–∫

@router.callback_query(F.data.startswith("select_dungeon_"), StateFilter(DungeonState.choosing_dungeon))
async def select_dungeon_callback(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    dungeon_key = callback.data.split("select_dungeon_")[1]
    dungeon_info = DUNGEONS.get(dungeon_key)
    
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')

    if not dungeon_info:
        if menu_message_id:
            await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id, text="–ü–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await callback.message.answer("–ü–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —ç—Ç–æ—Ç —ç—Ç–∞–ø)
    current_energy = await recalculate_energy(uid)
    if current_energy < dungeon_info['entry_cost_energy']:
        if menu_message_id:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id, message_id=menu_message_id,
                text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ <b>{dungeon_info['name_ru']}</b>.\n"
                f"–ù—É–∂–Ω–æ {dungeon_info['entry_cost_energy']} —ç–Ω–µ—Ä–≥–∏–∏, —É —Ç–µ–±—è {current_energy}/{MAX_ENERGY}.",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ <b>{dungeon_info['name_ru']}</b>.\n"
                f"–ù—É–∂–Ω–æ {dungeon_info['entry_cost_energy']} —ç–Ω–µ—Ä–≥–∏–∏, —É —Ç–µ–±—è {current_energy}/{MAX_ENERGY}.",
                parse_mode="HTML"
            )
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–ª—å–∑—è –≤–æ–π—Ç–∏
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∞–Ω–∂ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(selected_dungeon_key=dungeon_key)

    user_pets_db_records = await fetch_all("SELECT id, name, level, rarity, stats, current_hp FROM pets WHERE user_id = $1 ORDER BY level DESC, rarity DESC", {"uid": uid})
    
    if not user_pets_db_records:
        if menu_message_id:
            await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id, text="–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /buy_egg –∏ /hatch.")
        else:
            await callback.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–∑–µ–º–µ–ª–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /buy_egg –∏ /hatch.")
        await state.clear()
        await callback.answer()
        return
    
    user_pets_db = []
    for pet_record in user_pets_db_records:
        pet = dict(pet_record)
        pet['stats'] = json.loads(pet['stats']) # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º stats
        if pet['current_hp'] is None: 
            pet['current_hp'] = pet['stats']['hp']
        user_pets_db.append(pet)
    
    builder = InlineKeyboardBuilder()
    selected_pets_ids = []
    
    data = await state.get_data()
    if 'selected_pets_ids' in data:
        selected_pets_ids = data['selected_pets_ids']

    for pet in user_pets_db:
        is_selected = pet['id'] in selected_pets_ids
        button_text = f"‚úÖ {pet['name']} (–£—Ä. {pet['level']}) [{pet['current_hp']}/{pet['stats']['hp']} HP]" if is_selected else f"‚òê {pet['name']} (–£—Ä. {pet['level']}) [{pet['current_hp']}/{pet['stats']['hp']} HP]"
        builder.button(text=button_text, callback_data=f"toggle_pet_{pet['id']}")

    builder.adjust(2)

    builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ—Ö–æ–¥", callback_data="start_dungeon"))
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_dungeon"))

    pet_list_text = "\n".join([f"ID {pet['id']} ‚Äî {pet['name']} ({pet['rarity']}, –£—Ä. {pet['level']}) [{pet['current_hp']}/{pet['stats']['hp']} HP]" for pet in user_pets_db])

    if menu_message_id:
        try:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id, message_id=menu_message_id,
                text=f"–¢—ã –≤—ã–±—Ä–∞–ª –ø–æ–¥–∑–µ–º–µ–ª—å–µ <b>{dungeon_info['name_ru']}</b>.\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {dungeon_info['difficulty_level']}, –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: {dungeon_info['entry_cost_energy']}\n\n"
                f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {dungeon_info['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ): \n{pet_list_text}\n\n"
                f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e): # –ò–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                await callback.message.answer(
                    f"–¢—ã –≤—ã–±—Ä–∞–ª –ø–æ–¥–∑–µ–º–µ–ª—å–µ <b>{dungeon_info['name_ru']}</b>.\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {dungeon_info['difficulty_level']}, –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: {dungeon_info['entry_cost_energy']}\n\n"
                    f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {dungeon_info['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ): \n{pet_list_text}\n\n"
                    f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
    else:
        await callback.message.answer(
            f"–¢—ã –≤—ã–±—Ä–∞–ª –ø–æ–¥–∑–µ–º–µ–ª—å–µ <b>{dungeon_info['name_ru']}</b>.\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {dungeon_info['difficulty_level']}, –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: {dungeon_info['entry_cost_energy']}\n\n"
            f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {dungeon_info['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ): \n{pet_list_text}\n\n"
            f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    
    await state.set_state(DungeonState.choosing_pets)
    await callback.answer()
    # await asyncio.sleep(random.uniform(0.5, 1.0)) # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å

@router.callback_query(F.data.startswith("toggle_pet_"), StateFilter(DungeonState.choosing_pets))
async def toggle_pet_selection_callback(callback: CallbackQuery, state: FSMContext):
    pet_id = int(callback.data.split("toggle_pet_")[1])
    data = await state.get_data()
    selected_pets_ids = data.get('selected_pets_ids', [])
    menu_message_id = data.get('menu_message_id')
    selected_dungeon_key = data.get('selected_dungeon_key')
    dungeon_info = DUNGEONS.get(selected_dungeon_key)

    user_pets_db_records = await fetch_all("SELECT id, name, level, rarity, stats, current_hp FROM pets WHERE user_id = $1 ORDER BY level DESC, rarity DESC", {"uid": callback.from_user.id})
    
    user_pets_db = []
    for pet_record in user_pets_db_records:
        pet = dict(pet_record)
        pet['stats'] = json.loads(pet['stats']) # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º stats
        if pet['current_hp'] is None: 
            pet['current_hp'] = pet['stats']['hp']
        user_pets_db.append(pet)

    if pet_id in selected_pets_ids:
        selected_pets_ids.remove(pet_id)
    else:
        if any(pet['id'] == pet_id for pet in user_pets_db):
            selected_pet = next((p for p in user_pets_db if p['id'] == pet_id), None)
            if selected_pet and selected_pet['current_hp'] > 0:
                selected_pets_ids.append(pet_id)
            else:
                await callback.answer("–≠—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ 0 HP. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ª–µ—á–∏—Ç–µ –µ–≥–æ.", show_alert=True)
                return
        
    await state.update_data(selected_pets_ids=selected_pets_ids)
    
    builder = InlineKeyboardBuilder()
    for pet in user_pets_db:
        is_selected = pet['id'] in selected_pets_ids
        button_text = f"‚úÖ {pet['name']} (–£—Ä. {pet['level']}) [{pet['current_hp']}/{pet['stats']['hp']} HP]" if is_selected else f"‚òê {pet['name']} (–£—Ä. {pet['level']}) [{pet['current_hp']}/{pet['stats']['hp']} HP]"
        builder.button(text=button_text, callback_data=f"toggle_pet_{pet['id']}")
    builder.adjust(2)

    builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ—Ö–æ–¥", callback_data="start_dungeon"))
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_dungeon"))

    pet_list_text = "\n".join([f"ID {pet['id']} ‚Äî {pet['name']} ({pet['rarity']}, –£—Ä. {pet['level']}) [{pet['current_hp']}/{pet['stats']['hp']} HP]" for pet in user_pets_db])

    if menu_message_id:
        try:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id, message_id=menu_message_id,
                text=f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {dungeon_info['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ):\n{pet_list_text}\n\n"
                f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                await callback.message.answer(
                    f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {dungeon_info['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ):\n{pet_list_text}\n\n"
                    f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
                    reply_markup=builder.as_markup(),
                    parse_mode="HTML"
                )
    else:
        await callback.message.answer(
            f"–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã (–≤—ã–±–µ—Ä–∏ {dungeon_info['min_pets_required']} –∏–ª–∏ –±–æ–ª—å—à–µ):\n{pet_list_text}\n\n"
            f"–í—ã–±—Ä–∞–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(selected_pets_ids)}",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    await callback.answer()
    # await asyncio.sleep(random.uniform(0.5, 1.0)) # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å

@router.callback_query(F.data == "start_dungeon", StateFilter(DungeonState.choosing_pets))
async def start_dungeon_callback(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    data = await state.get_data()
    selected_dungeon_key = data.get('selected_dungeon_key')
    selected_pets_ids = data.get('selected_pets_ids', [])
    menu_message_id = data.get('menu_message_id') # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ FSM

    if not selected_dungeon_key:
        if menu_message_id:
            await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /dungeon –µ—â–µ —Ä–∞–∑.")
        else:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /dungeon –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        await callback.answer()
        return

    dungeon_info = DUNGEONS.get(selected_dungeon_key)
    if not dungeon_info:
        if menu_message_id:
            await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        await callback.answer()
        return

    if len(selected_pets_ids) < dungeon_info['min_pets_required']:
        await callback.answer(f"–î–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∑–µ–º–µ–ª—å—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º {dungeon_info['min_pets_required']} –ø–∏—Ç–æ–º—Ü–µ–≤. –í—ã–±—Ä–∞–Ω–æ: {len(selected_pets_ids)}.", show_alert=True)
        return

    selected_pets_data = []
    for pet_id in selected_pets_ids:
        pet_record = await fetch_one("SELECT id, name, level, stats, class, rarity, current_hp FROM pets WHERE id = $1 AND user_id = $2", {"id": pet_id, "user_id": uid})
        
        if pet_record:
            pet = dict(pet_record)
            pet['stats'] = json.loads(pet['stats'])
            if pet['current_hp'] is None:
                pet['current_hp'] = pet['stats']['hp']
            
            if pet['current_hp'] <= 0:
                if menu_message_id:
                    await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id, text=f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ—Ö–æ–¥. –ü–∏—Ç–æ–º–µ—Ü <b>{pet['name']}</b> –∏–º–µ–µ—Ç 0 HP. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ª–µ—á–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /heal.", parse_mode="HTML")
                else:
                    await callback.message.answer(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ—Ö–æ–¥. –ü–∏—Ç–æ–º–µ—Ü <b>{pet['name']}</b> –∏–º–µ–µ—Ç 0 HP. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ª–µ—á–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é /heal.", parse_mode="HTML")
                await state.clear()
                await callback.answer()
                return

            selected_pets_data.append(pet)
    
    if len(selected_pets_data) < dungeon_info['min_pets_required']:
        if menu_message_id:
            await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –º–µ—Ä—Ç–≤—ã –∏–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –º–µ—Ä—Ç–≤—ã –∏–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        await callback.answer()
        return

    current_energy = await recalculate_energy(uid)
    if current_energy < dungeon_info['entry_cost_energy']:
        if menu_message_id:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id, message_id=menu_message_id,
                text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ <b>{dungeon_info['name_ru']}</b>.\n"
                f"–ù—É–∂–Ω–æ {dungeon_info['entry_cost_energy']} —ç–Ω–µ—Ä–≥–∏–∏, —É —Ç–µ–±—è {current_energy}/{MAX_ENERGY}.",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ <b>{dungeon_info['name_ru']}</b>.\n"
                f"–ù—É–∂–Ω–æ {dungeon_info['entry_cost_energy']} —ç–Ω–µ—Ä–≥–∏–∏, —É —Ç–µ–±—è {current_energy}/{MAX_ENERGY}.",
                parse_mode="HTML"
            )
        await state.clear()
        await callback.answer()
        return
    
    await update_user_energy_db(uid, current_energy - dungeon_info['entry_cost_energy'])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∞–Ω–∂–∞
    # –ï—Å–ª–∏ menu_message_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    dungeon_status_message_id = menu_message_id
    if not dungeon_status_message_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–µ –±—ã–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –±–µ–∑ –º–µ–Ω—é)
        sent_message = await callback.message.answer(f"üó∫Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ <b>{dungeon_info['name_ru']}</b>!\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—é!", parse_mode="HTML")
        dungeon_status_message_id = sent_message.message_id
    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id,
                                                text=f"üó∫Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ <b>{dungeon_info['name_ru']}</b>!\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—é!",
                                                parse_mode="HTML")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                sent_message = await callback.message.answer(f"üó∫Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ <b>{dungeon_info['name_ru']}</b>!\n–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—é!", parse_mode="HTML")
                dungeon_status_message_id = sent_message.message_id


    await state.update_data(
        current_dungeon_key=selected_dungeon_key,
        current_pets_data=selected_pets_data,
        current_encounter_index=0,
        dungeon_total_xp = 0,
        dungeon_total_coins = 0,
        dungeon_status_message_id=dungeon_status_message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    )
    await state.set_state(DungeonState.in_dungeon_progress)

    await callback.answer()
    await asyncio.sleep(random.uniform(1.0, 2.0)) # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∏–º—É–ª—è—Ü–∏–∏

    # –ü–µ—Ä–µ–¥–∞–µ–º message_id –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–º—É–ª—è—Ü–∏–∏
    await simulate_dungeon_progress(callback.message, uid, state, dungeon_status_message_id)


@router.callback_query(F.data == "cancel_dungeon", StateFilter(DungeonState.choosing_pets))
async def cancel_dungeon_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')

    if menu_message_id:
        try:
            await callback.bot.edit_message_text(chat_id=callback.message.chat.id, message_id=menu_message_id, text="–í—ã—Ö–æ–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è.")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                await callback.message.answer("–í—ã—Ö–æ–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è.")
    else:
        await callback.message.answer("–í—ã—Ö–æ–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è.")
    await state.clear()
    await callback.answer()
    # await asyncio.sleep(random.uniform(0.5, 1.0)) # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å

# --- Dungeon Simulation Logic ---

# –î–æ–±–∞–≤–ª—è–µ–º dungeon_status_message_id –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
async def simulate_dungeon_progress(message: Message, user_id: int, state: FSMContext, dungeon_status_message_id: int):
    data = await state.get_data()
    dungeon_key = data['current_dungeon_key']
    dungeon_info = DUNGEONS[dungeon_key]
    pets_data = data['current_pets_data']
    encounter_index = data['current_encounter_index']
    dungeon_total_xp = data['dungeon_total_xp']
    dungeon_total_coins = data['dungeon_total_coins']

    num_encounters_to_do = dungeon_info['num_encounters']
    if dungeon_info['boss_monster']:
        num_encounters_to_do += 1

    current_output_text = "" # –ë—É—Ñ–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞

    for i in range(encounter_index, num_encounters_to_do):
        if not any(pet['current_hp'] > 0 for pet in pets_data):
            current_output_text += (
                f"\n\nüíÄ –í—Å–µ –≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ. –ü–æ—Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω!\n"
                f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {dungeon_total_xp} XP, {dungeon_total_coins} üí∞.\n"
                f"<b>–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ª–µ—á–µ–Ω–∏–∏!</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/heal</code>."
            )
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id, message_id=dungeon_status_message_id,
                    text=current_output_text, parse_mode="HTML"
                )
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    await message.answer(current_output_text, parse_mode="HTML") # Fallback
            
            for pet_with_damage in pets_data:
                await execute_query(
                    "UPDATE pets SET current_hp = $1 WHERE id = $2", 
                    {"current_hp": max(0, pet_with_damage['current_hp']), "pet_id": pet_with_damage['id']}
                )
            await state.clear()
            await asyncio.sleep(random.uniform(1.0, 2.0))
            return

        monster_key = None
        is_boss_encounter = False
        if i < dungeon_info['num_encounters']:
            monster_key = random.choice(dungeon_info['monster_pool'])
            encounter_type = "–ú–æ–Ω—Å—Ç—Ä"
        else:
            monster_key = dungeon_info['boss_monster']
            encounter_type = "–ë–û–°–°"
            is_boss_encounter = True

        monster_base_info = MONSTERS[monster_key]
        
        # --- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–æ–Ω—Å—Ç—Ä–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞–Ω–∂–∞ ---
        scaled_monster_info = {
            "name_ru": monster_base_info['name_ru'],
            "hp": int(monster_base_info['base_hp'] + (dungeon_info['difficulty_level'] * BASE_MONSTER_HP_PER_DIFFICULTY)),
            "atk": int(monster_base_info['base_atk'] + (dungeon_info['difficulty_level'] * BASE_MONSTER_ATK_PER_DIFFICULTY)),
            "def": int(monster_base_info['base_def'] + (dungeon_info['difficulty_level'] * BASE_MONSTER_DEF_PER_DIFFICULTY)),
            "xp_reward": int(monster_base_info['base_hp'] * 0.5 + (dungeon_info['difficulty_level'] * BASE_MONSTER_XP_PER_DIFFICULTY)), # XP –∑–∞–≤–∏—Å–∏—Ç –æ—Ç HP –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            "coin_reward": int(monster_base_info['base_hp'] * 0.3 + (dungeon_info['difficulty_level'] * BASE_MONSTER_COINS_PER_DIFFICULTY)), # –ú–æ–Ω–µ—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç HP –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            "abilities": monster_base_info.get('abilities', [])
        }

        if is_boss_encounter:
            scaled_monster_info['hp'] = int(scaled_monster_info['hp'] * BOSS_MULTIPLIER_HP)
            scaled_monster_info['atk'] = int(scaled_monster_info['atk'] * BOSS_MULTIPLIER_ATK)
            scaled_monster_info['def'] = int(scaled_monster_info['def'] * BOSS_MULTIPLIER_DEF)
            scaled_monster_info['xp_reward'] = int(scaled_monster_info['xp_reward'] * BOSS_MULTIPLIER_REWARD)
            scaled_monster_info['coin_reward'] = int(scaled_monster_info['coin_reward'] * BOSS_MULTIPLIER_REWARD)
            
        current_monster_name = scaled_monster_info['name_ru']

        # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—ã—á–∫–∏
        current_output_text = f"‚ö°Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å <b>{current_monster_name}</b> ({encounter_type})!\n"
        current_output_text += "–ù–∞—á–∞–ª–∞—Å—å –±–∏—Ç–≤–∞!\n"

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–π, –ø–µ—Ä–µ–¥–∞–≤–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω—Å—Ç—Ä–∞
        battle_result = simulate_battle_dungeon(pets_data, scaled_monster_info)
        
        if battle_result.get('battle_log'):
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å –ª–æ–≥ –±–æ—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            current_output_text += "\n".join(battle_result['battle_log']) + "\n"

        if battle_result['victory']:
            dungeon_total_xp += battle_result['xp_gained']
            dungeon_total_coins += battle_result['coins_gained']
            current_output_text += (
                f"\nüèÜ –ü–æ–±–µ–¥–∞ –Ω–∞–¥ <b>{current_monster_name}</b>!\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ: {battle_result['xp_gained']} XP, {battle_result['coins_gained']} üí∞"
                f"\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–Ω–∂–∞: {i + 1}/{num_encounters_to_do} —Å—Ç—ã—á–µ–∫."
                f"\n–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –¥–∞–Ω–∂–µ: {dungeon_total_xp} XP, {dungeon_total_coins} üí∞"
            )
            
            pets_data = battle_result['updated_pets_data']
            for pet_update in pets_data:
                await execute_query("UPDATE pets SET xp = xp + $1, current_hp = $2 WHERE id = $3", 
                                    {"xp_gained": battle_result['xp_gained'], "current_hp": max(0, pet_update['current_hp']), "pet_id": pet_update['id']})
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ check_and_level_up_pet, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å
                # await check_and_level_up_pet(message.bot, user_id, pet_update["id"])
            
            await state.update_data(
                current_encounter_index=i + 1,
                dungeon_total_xp=dungeon_total_xp,
                dungeon_total_coins=dungeon_total_coins,
                current_pets_data=pets_data
            )

        else:
            current_output_text += (
                f"\nüíÄ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Ç–µ—Ä–ø–µ–ª–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç <b>{current_monster_name}</b>. –ü–æ—Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω!\n"
                f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {dungeon_total_xp} XP, {dungeon_total_coins} üí∞ (–¥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è).\n"
                f"<b>–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ª–µ—á–µ–Ω–∏–∏!</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/heal</code>."
            )
            
            pets_data_after_loss = battle_result['updated_pets_data']
            for pet_with_damage in pets_data_after_loss:
                await execute_query(
                    "UPDATE pets SET current_hp = $1 WHERE id = $2", 
                    {"current_hp": max(0, pet_with_damage['current_hp']), "pet_id": pet_with_damage['id']}
                )
            await state.clear()
            
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id, message_id=dungeon_status_message_id,
                    text=current_output_text, parse_mode="HTML"
                )
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    await message.answer(current_output_text, parse_mode="HTML") # Fallback
            await asyncio.sleep(random.uniform(1.0, 2.0))
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –¥–∞–Ω–∂–∞
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id, message_id=dungeon_status_message_id,
                text=current_output_text, parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                await message.answer(current_output_text, parse_mode="HTML") # Fallback, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        await asyncio.sleep(random.uniform(2.0, 4.0)) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—ã—á–∫–∞–º–∏

    # --- –î–∞–Ω–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω ---
    reward_egg_type_key = dungeon_info['reward_egg_type']
    reward_egg_info = EGG_TYPES.get(reward_egg_type_key)

    user_data_for_eggs = await fetch_one("SELECT eggs FROM users WHERE user_id = $1 FOR UPDATE", {"uid": user_id})
    current_eggs = json.loads(user_data_for_eggs['eggs']) if user_data_for_eggs['eggs'] else []

    new_egg_record = {
        "type": reward_egg_type_key,
        "obtained_at": datetime.utcnow().isoformat(),
        "source": dungeon_info['name_ru']
    }
    current_eggs.append(new_egg_record)

    await execute_query("UPDATE users SET eggs = $1, coins = coins + $2 WHERE user_id = $3", 
                        {"eggs": json.dumps(current_eggs), "coins": dungeon_total_coins, "uid": user_id})
    
    for pet_with_damage in pets_data:
        await execute_query(
            "UPDATE pets SET current_hp = $1 WHERE id = $2", 
            {"current_hp": pet_with_damage['stats']['hp'], "pet_id": pet_with_damage['id']}
        )
    
    final_summary_text = (
        f"üéâ <b>–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ {dungeon_info['name_ru']}</b>!\n"
        f"–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: <b>{dungeon_total_xp} XP</b> –∏ <b>{dungeon_total_coins} üí∞</b>.\n"
        f"–í –Ω–∞–≥—Ä–∞–¥—É —Ç—ã –ø–æ–ª—É—á–∏–ª <b>{reward_egg_info['name_ru']}</b>!\n"
        f"–ù–∞–ø–∏—à–∏ /hatch, —á—Ç–æ–±—ã –≤—ã–ª—É–ø–∏—Ç—å –µ–≥–æ!\n"
        f"\n–¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: {await recalculate_energy(user_id)}/{MAX_ENERGY}"
    )
    
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id, message_id=dungeon_status_message_id,
            text=final_summary_text, parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            await message.answer(final_summary_text, parse_mode="HTML") # Fallback
            
    await state.clear()
    await asyncio.sleep(random.uniform(1.0, 2.0))