import json
import random
from datetime import datetime, timezone

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ fetch_one –∏ execute_query –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
from db.db import fetch_all, fetch_one, execute_query

from bot.handlers.bonus import update_pet_stats_and_xp, get_xp_for_next_level 
from aiogram.client.bot import Bot 

router = Router()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–ª–∏—è–Ω–∏—è ---
RARITY_ORDER = ["–û–±—ã—á–Ω–∞—è", "–†–µ–¥–∫–∞—è", "–≠–ø–∏—á–µ—Å–∫–∞—è", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"] # –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
RARITY_UPGRADE_CHANCE = 0.70 # 70% —à–∞–Ω—Å –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏

BASE_STATS_BY_RARITY = {
    "–û–±—ã—á–Ω–∞—è": {"hp": 50, "atk": 10, "def": 5},
    "–†–µ–¥–∫–∞—è": {"hp": 70, "atk": 15, "def": 8},
    "–≠–ø–∏—á–µ—Å–∫–∞—è": {"hp": 100, "atk": 20, "def": 12},
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {"hp": 150, "atk": 30, "def": 18},
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": {"hp": 200, "atk": 40, "def": 25}
}

MERGE_STAT_MULTIPLIER = 0.6 
MERGE_BONUS_PER_STAT = 5 
MERGE_XP_BONUS = 100 

# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–∏—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–Ω–µ—Ç—ã)
MERGE_COST = 500 # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–æ–Ω–µ—Ç–∞—Ö

@router.message(Command("merge"))
async def merge_cmd(message: Message, command: CommandObject, bot: Bot): # –î–æ–±–∞–≤–ª–µ–Ω bot: Bot
	uid = message.from_user.id
	args = command.args

	if not args:
		await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: <code>/merge id1 id2</code>\n"
							 "–°–ª–∏—è–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –ø–∏—Ç–æ–º—Ü–∞–º–∏ –æ–¥–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏.", parse_mode="HTML")
		return
	
	try:
		id1, id2 = map(int, args.strip().split())
	except Exception:
		await message.answer("‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –ø–∏—Ç–æ–º—Ü–µ–≤ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/merge 123 456</code>", parse_mode="HTML")
		return
	
	if id1 == id2:
		await message.answer("‚ùó –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è —Å–ª–∏—è–Ω–∏—è.")
		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å–ª–∏—è–Ω–∏—è
	user_coins_record = await fetch_one("SELECT coins FROM users WHERE user_id = $1", {"uid": uid})
	if not user_coins_record or user_coins_record['coins'] < MERGE_COST:
		await message.answer(f"‚ùå –î–ª—è —Å–ª–∏—è–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è {MERGE_COST} üí∞. –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
		return

	pet1 = await fetch_one("SELECT id, name, rarity, class, level, xp, stats, coin_rate FROM pets WHERE user_id = $1 AND id = $2", {"uid": uid, "id": id1})
	pet2 = await fetch_one("SELECT id, name, rarity, class, level, xp, stats, coin_rate FROM pets WHERE user_id = $1 AND id = $2", {"uid": uid, "id": id2})

	if not pet1 or not pet2:
		await message.answer("‚ùå –û–¥–∏–Ω –∏–∑ –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ. –ü—Ä–æ–≤–µ—Ä—å ID.")
		return

	if pet1["rarity"] != pet2["rarity"]:
		await message.answer("‚ö†Ô∏è –°–ª–∏—è–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –ø–∏—Ç–æ–º—Ü–∞–º–∏ <b>–æ–¥–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏</b>!", parse_mode="HTML")
		return
	
	current_rarity_index = RARITY_ORDER.index(pet1["rarity"])
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–¥–∫–æ—Å—Ç—å
	new_rarity = pet1["rarity"] # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞ –∂–µ —Ä–µ–¥–∫–æ—Å—Ç—å
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å
	if current_rarity_index + 1 < len(RARITY_ORDER):
		# –ï—Å—Ç—å —à–∞–Ω—Å –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
		if random.random() < RARITY_UPGRADE_CHANCE:
			new_rarity_index = current_rarity_index + 1
			new_rarity = RARITY_ORDER[new_rarity_index]
			rarity_upgraded = True
		else:
			rarity_upgraded = False
	else:
		# –£–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å, –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
		rarity_upgraded = False
		await message.answer(f"‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã —É–∂–µ <b>{pet1['rarity']}</b> —Ä–µ–¥–∫–æ—Å—Ç–∏, —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å. –°–ª–∏—è–Ω–∏–µ —É–ª—É—á—à–∏—Ç —Å—Ç–∞—Ç—ã, –Ω–æ —Ä–µ–¥–∫–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.", parse_mode="HTML")

	# –†–∞—Å—á–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–æ–≤
	stats1 = json.loads(pet1["stats"]) if isinstance(pet1["stats"], str) else pet1["stats"]
	stats2 = json.loads(pet2["stats"]) if isinstance(pet2["stats"], str) else pet2["stats"]

	# –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π (–∏–ª–∏ —Ç–µ–∫—É—â–µ–π) —Ä–µ–¥–∫–æ—Å—Ç–∏
	base_new_stats = BASE_STATS_BY_RARITY.get(new_rarity, {"hp": 1, "atk": 1, "def": 1}) # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

	new_stats = {
		"hp": int(base_new_stats["hp"] + (stats1["hp"] + stats2["hp"]) * MERGE_STAT_MULTIPLIER + MERGE_BONUS_PER_STAT),
		"atk": int(base_new_stats["atk"] + (stats1["atk"] + stats2["atk"]) * MERGE_STAT_MULTIPLIER + MERGE_BONUS_PER_STAT),
		"def": int(base_new_stats["def"] + (stats1["def"] + stats2["def"]) * MERGE_STAT_MULTIPLIER + MERGE_BONUS_PER_STAT)
	}

	new_xp = pet1["xp"] + pet2["xp"] + MERGE_XP_BONUS
	new_level = 1 

	name = pet1["name"] if pet1["level"] >= pet2["level"] else pet2["name"]
	pclass = pet1["class"] if pet1["level"] >= pet2["level"] else pet2["class"]
 
	coin_rate = int((pet1["coin_rate"] + pet2["coin_rate"]) / 2) # –£—Å—Ä–µ–¥–Ω—è–µ–º coin_rate

	# –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
	try:
		# !!! –ó–¥–µ—Å—å –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º BEGIN/COMMIT/ROLLBACK –Ω–∞–ø—Ä—è–º—É—é —Å execute_query,
		# –∞ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ `asyncpg` –∏ –æ–±–µ—Ä—Ç–∫–∏ `db.db` —É–ø—Ä–∞–≤–ª—è—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
		# –ï—Å–ª–∏ _pool –≤ db.db –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `conn.transaction()`, —Ç–æ —è–≤–Ω—ã–µ BEGIN/COMMIT/ROLLBACK –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω—ã
		# –∏ –¥–∞–∂–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º.
		# –õ—É—á—à–µ –æ–±–µ—Ä–Ω—É—Ç—å –≤–µ—Å—å –±–ª–æ–∫ –≤ `async with conn.transaction():` –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ conn.
		# –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —Ç–∞–∫ –∫–∞–∫ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ execute_query, fetch_one,
		# —Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Ä—É—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞.
		# –ê—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
		# –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ db.db, –∏–ª–∏ –∂–µ –ø–µ—Ä–µ–¥–∞—á–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.
		# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é —è–≤–Ω—ã–µ BEGIN/COMMIT/ROLLBACK –∑–¥–µ—Å—å,
		# –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—É—Å—å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ execute_query.
		# await execute_query("BEGIN") # <--- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

		# –°–Ω–∏–º–∞–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ —Å–ª–∏—è–Ω–∏–µ
		await execute_query("UPDATE users SET coins = coins - $1 WHERE user_id = $2", {"cost": MERGE_COST, "uid": uid})

		# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
		# –ò–°–ü–û–õ–¨–ó–£–ï–ú fetch_one –≤–º–µ—Å—Ç–æ execute_query –¥–ª—è INSERT...RETURNING
		insert_result = await fetch_one(
			"INSERT INTO pets (user_id, name, rarity, class, level, xp, stats, coin_rate, last_collected, current_hp) "
			"VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, name, stats, xp, level",
			{
				"uid": uid,
				"name": name,
				"rarity": new_rarity,
				"class": pclass,
				"level": new_level, 
				"xp": new_xp,
				"stats": json.dumps(new_stats),
				"coin_rate": coin_rate,
				"last_collected": datetime.utcnow().replace(tzinfo=timezone.utc),
				"current_hp": new_stats['hp'] 
			}
			# –£–î–ê–õ–ï–ù return_result=True, —Ç–∞–∫ –∫–∞–∫ fetch_one —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		)
		
		new_pet_id = insert_result['id'] if insert_result else None # fetch_one –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω Record –∏–ª–∏ None

		if not new_pet_id:
			raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è.")

		# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
		await execute_query(
			"DELETE FROM pets WHERE user_id = $1 AND id = ANY($2::int[])",
			{"uid": uid, "ids": [id1, id2]}
		)

		# await execute_query("COMMIT") # <--- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

		# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—ã –∏ –æ–ø—ã—Ç –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
		# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ update_pet_stats_and_xp —Å–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
		await update_pet_stats_and_xp(bot, uid, new_pet_id, xp_gain=0)

		# –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
		final_new_pet = await fetch_one("SELECT name, rarity, level, stats FROM pets WHERE id = $1", {"id": new_pet_id})
		# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ final_new_pet –Ω–µ None (—Ö–æ—Ç—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ INSERT —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ)
		if not final_new_pet:
			raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

		final_stats = json.loads(final_new_pet["stats"]) if isinstance(final_new_pet["stats"], str) else final_new_pet["stats"]

		rarity_message = ""
		if rarity_upgraded:
			rarity_message = f" –∏ –ø–æ–≤—ã—Å–∏–ª —Å–≤–æ—é —Ä–µ–¥–∫–æ—Å—Ç—å –¥–æ <b>{new_rarity}</b>!"
		else:
			rarity_message = f" –∏ –æ—Å—Ç–∞–ª—Å—è <b>{new_rarity}</b> —Ä–µ–¥–∫–æ—Å—Ç–∏, –Ω–æ —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ!"

		await message.answer(
			f"‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–∏—Ç–æ–º–µ—Ü <b>{final_new_pet['name']}</b> –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ª–∏—è–Ω–∏–µ–º –¥–≤—É—Ö –ø–∏—Ç–æ–º—Ü–µ–≤{rarity_message}\n"
			f"–¢–µ–ø–µ—Ä—å –æ–Ω <b>–£—Ä–æ–≤–Ω—è {final_new_pet['level']}</b>!\n"
			f"–ù–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
			f"‚öî –ê—Ç–∞–∫–∞: {final_stats['atk']} | üõ° –ó–∞—â–∏—Ç–∞: {final_stats['def']} | ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {final_stats['hp']}\n"
			f"–î–≤–∞ –ø–∏—Ç–æ–º—Ü–∞ (ID: {id1}, {id2}) –±—ã–ª–∏ –ø–æ–≥–ª–æ—â–µ–Ω—ã.",
			parse_mode="HTML"
		)

	except Exception as e:
		# await execute_query("ROLLBACK") # <--- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
		print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–µ–≤: {e}")
		await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ª–∏—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", parse_mode="HTML")