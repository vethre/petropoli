#START.PY
from datetime import datetime
from math import ceil
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json

# Import your DB functions
from db.db import (
    fetch_all,
    fetch_one,
    execute_query,
    get_user_quests,
    insert_quest,
    claim_quest_reward,
)

# Import show_pets_paginated from pets.py
from bot.handlers.pets import show_pets_paginated

router = Router()

@router.message(Command("pstart"))
async def cmd_start(message: Message):
    uid = message.from_user.id
    user = await fetch_one(
        "SELECT * FROM users WHERE user_id = $1", {"uid": uid}
    )
    if not user:
        # New user setup
        await execute_query(
            "INSERT INTO users (user_id, coins, eggs, streak, active_zone) VALUES ($1, 500, $2, 0, '–õ—É–∂–∞–π–∫–∞')",
            {"uid": uid, "eggs": json.dumps([])},
        )
        # Initial quests
        await insert_quest(uid, "–ü–µ—Ä–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —è–π—Ü–∞", "–û—Ç–∫—Ä–æ–π —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —è–π—Ü–æ", "–õ—É–∂–∞–π–∫–∞", 1, 250)
        await insert_quest(uid, "–°–æ–±–µ—Ä–∏ 3 —è–π—Ü–∞", "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∫–æ–ø–∏—Ç—å 3 —è–π—Ü–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ", "–õ—É–∂–∞–π–∫–∞", 3, 300)
        await insert_quest(uid, "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞", "–í—ã–≤–µ–¥–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞", "–õ—É–∂–∞–π–∫–∞", 1, 0, reward_egg=True)
        # Unlock first zone
        await execute_query(
            "INSERT INTO user_zones (user_id, zone, unlocked) VALUES ($1, $2, TRUE)",
            {"user_id": uid, "zone": "–õ—É–∂–∞–π–∫–∞"},
        )
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Petropolis!\n–¢—ã –ø–æ–ª—É—á–∏–ª 500 –ø–µ—Ç–∫–æ–π–Ω–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç üí∞"
        )
    else:
        await message.answer(
            "üëã –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–ù–∞–ø–∏—à–∏ /pprofile, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ."
        )

@router.message(Command("pprofile"))
async def profile_cmd(message: Message):
    await show_profile(message.from_user.id, message)

async def show_profile(uid: int, message: Message):
    user = await fetch_one(
        "SELECT * FROM users WHERE user_id = $1", {"uid": uid}
    )
    if not user:
        return await message.answer(
            "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /pstart!", parse_mode="HTML"
        )

    # Parse eggs JSON
    try:
        eggs = json.loads(user.get("eggs") or "[]")
    except (json.JSONDecodeError, TypeError):
        eggs = []

    # Build inline keyboard
    kb = InlineKeyboardBuilder()
    kb.button(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory_cb")
    kb.button(text="üìú –ö–≤–µ—Å—Ç—ã",     callback_data="quests_cb")
    kb.button(text="üß≠ –ó–æ–Ω—ã",       callback_data="zones_cb")
    kb.button(text="üêæ –ü–∏—Ç–æ–º—Ü—ã",    callback_data="pets_cb")
    kb.adjust(2)  # –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞

    # Determine display name
    try:
        chat = await message.bot.get_chat(uid)
        display = chat.first_name or chat.full_name
    except Exception:
        display = message.from_user.first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}"

    zone_display = user.get("active_zone") or "‚Äî"
    text = (
        f"‚ú® <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞: {display}</b> ‚ú®\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üåç <b>–ê–∫—Ç–∏–≤–Ω–∞—è –∑–æ–Ω–∞:</b> <i>{zone_display}</i>\n"
        f"üí∞ <b>–ü–µ—Ç–∫–æ–π–Ω—ã:</b> {user['coins']:,}\n"
        f"üî• <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç—Ä–∏–∫:</b> {user['streak']} –¥–Ω–µ–π\n"
        f"ü•ö <b>–Ø–∏—Ü –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:</b> {len(eggs)}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üê£ <b>–í—ã–ª—É–ø–ª–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤:</b> {user.get('hatched_count', 0)}\n"
        f"üõçÔ∏è <b>–ö—É–ø–ª–µ–Ω–æ —è–∏—Ü:</b> {user.get('bought_eggs', 0)}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"‚û°Ô∏è <i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
    )
    await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")

# Callbacks for profile actions
@router.callback_query(F.data == "inventory_cb")
async def inventory_cb(call: CallbackQuery):
    await call.answer()
    # –ù–µ —Ç—Ä–æ–≥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await call.message.answer("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@router.callback_query(F.data == "quests_cb")
async def quests_cb(call: CallbackQuery):
    await call.answer()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç—ã –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è
    await show_quests(call.message)

@router.callback_query(F.data == "zones_cb")
async def zones_cb(call: CallbackQuery):
    await call.answer()
    await show_zones(call.from_user.id, call.message)

@router.callback_query(F.data == "pets_cb")
async def pets_cb(call: CallbackQuery):
    await call.answer()
    await show_pets_paginated(call.from_user.id, call.message, page=1)

# Command handlers fallback
@router.message(Command("inventory"))
async def inventory_cmd(message: Message):
    await message.answer("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@router.message(Command("quests"))
async def show_quests_command(message: Message):
    await show_quests(message)

@router.message(Command("zones"))
async def zones_command(message: Message):
    await show_zones(message.from_user.id, message)

@router.message(Command("pets"))
async def pets_command(message: Message):
    await show_pets_paginated(message.from_user.id, message, page=1)

# Unified function for quests
async def show_quests(source_message: Message | CallbackQuery, page: int = 1):
    uid = source_message.from_user.id
    quests = await get_user_quests(uid)
    if not quests:
        text = "üìú –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤."
        markup = None
    else:
        text, kb = build_quests_text_and_markup(quests, page)
        markup = kb.as_markup()

    if isinstance(source_message, Message):
        await source_message.answer(text, reply_markup=markup, parse_mode="HTML")
    else:
        await source_message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        await source_message.answer()

# Unified function for zones
async def show_zones(uid: int, source: Message | CallbackQuery):
    zones_data = await fetch_all("SELECT * FROM zones")
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})
    user_zones = await fetch_all(
        "SELECT * FROM user_zones WHERE user_id = $1", {"uid": uid}
    )
    unlocked = {z["zone"] for z in user_zones if z["unlocked"]}
    active = user.get("active_zone", "–õ—É–∂–∞–π–∫–∞")

    text = "üß≠ <b>–¢–≤–æ–∏ –∑–æ–Ω—ã:</b>\n\n"
    kb = InlineKeyboardBuilder()
    for zone in zones_data:
        name = zone["name"]
        status = (
            "üåü –ê–∫—Ç–∏–≤–Ω–∞"
            if name == active
            else ("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞" if name in unlocked else "üîí –ó–∞–∫—Ä—ã—Ç–∞")
        )
        text += (
            f"üîπ <b>{name}</b>\n"
            f"üìñ {zone['description']}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {zone['cost']} –ø–µ—Ç–∫–æ–π–Ω–æ–≤\n"
            f"{status}\n\n"
        )
        if name in unlocked and name != active:
            kb.button(text=f"üìç –í–∫–ª—é—á–∏—Ç—å {name}", callback_data=f"zone_set:{name}")
        elif name not in unlocked:
            kb.button(text=f"üîì –û—Ç–∫—Ä—ã—Ç—å {name}", callback_data=f"zone_buy:{name}")
    kb.adjust(1)
    markup = kb.as_markup()

    if isinstance(source, Message):
        await source.answer(text, reply_markup=markup, parse_mode="HTML")
    else:
        await source.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        await source.answer()

# Build quests text and pagination
def build_quests_text_and_markup(quests: list[dict], page: int = 1, per_page: int = 3):
    total_pages = max(1, ceil(len(quests) / per_page))
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    end = start + per_page
    page_quests = quests[start:end]

    text = "üéØ <b>–¢–≤–æ–∏ –∫–≤–µ—Å—Ç—ã:</b>"
    kb = InlineKeyboardBuilder()
    for q in page_quests:
        progress = f"{q['progress']}/{q['goal']}" if q['goal'] > 0 else "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π"
        status = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω" if q['completed'] else "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        rewards = []
        if q['reward_coins'] > 0:
            rewards.append(f"üí∞ {q['reward_coins']} –ø–µ—Ç–∫–æ–π–Ω–æ–≤")
        if q.get('reward_egg', False):
            rewards.append("ü•ö 1 —è–π—Ü–æ")
        reward_text = "–ù–∞–≥—Ä–∞–¥–∞: " + ", ".join(rewards) if rewards else "–ë–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã"

        text += (
            f"üîπ <b>{q['name']}</b>\n"
            f"üìñ {q['description']}\n"
            f"üåç –ó–æ–Ω–∞: {q['zone']} | –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress} | –°—Ç–∞—Ç—É—Å: {status}\n"
            f"{reward_text}"
        )
        if q['completed'] and not q.get('claimed', False):
            kb.button(text=f"üéÅ –ó–∞–±—Ä–∞—Ç—å ¬´{q['name']}¬ª", callback_data=f"claim_quest:{q['id']}")

    # Pagination buttons
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"quests_page:{page-1}"))
    nav_buttons.append(InlineKeyboardButton(text=f"üìÑ {page}/{total_pages}", callback_data="noop"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"quests_page:{page+1}"))
    if nav_buttons:
        kb.row(*nav_buttons)

    return text, kb

# Claim quest reward
@router.callback_query(F.data.startswith("claim_quest:"))
async def claim_quest_callback(call: CallbackQuery):
    uid = call.from_user.id
    quest_id = int(call.data.split(":")[1])
    success, msg = await claim_quest_reward(uid, quest_id)
    await call.answer(msg, show_alert=True)
    await show_quests(call)

# Pagination callback
@router.callback_query(F.data.startswith("quests_page:"))
async def paginate_quests_callback(call: CallbackQuery):
    page = int(call.data.split(":")[1])
    await show_quests(call, page)

# Set active zone
@router.callback_query(F.data.startswith("zone_set:"))
async def set_zone_callback(call: CallbackQuery):
    uid = call.from_user.id
    zone = call.data.split(":")[1]
    await execute_query(
        "UPDATE users SET active_zone = $1 WHERE user_id = $2",
        {"active_zone": zone, "uid": uid}
    )
    await call.answer(f"üåç –ó–æ–Ω–∞ ¬´{zone}¬ª –≤—ã–±—Ä–∞–Ω–∞!")
    await show_zones(uid, call)

# Buy a zone
@router.callback_query(F.data.startswith("zone_buy:"))
async def buy_zone_callback(call: CallbackQuery):
    uid = call.from_user.id
    zone = call.data.split(":")[1]
    zone_data = await fetch_one("SELECT * FROM zones WHERE name = $1", {"name": zone})
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})
    if not zone_data or not user:
        return await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω—ã.", show_alert=True)
    cost = zone_data['cost']
    if user['coins'] < cost:
        return await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ç–∫–æ–π–Ω–æ–≤ üí∏", show_alert=True)
    # Deduct and unlock
    await execute_query(
        "UPDATE users SET coins = coins - $1 WHERE user_id = $2",
        {"cost": cost, "uid": uid},
    )
    await execute_query(
        "INSERT INTO user_zones (user_id, zone, unlocked) VALUES ($1, $2, TRUE) "
        "ON CONFLICT (user_id, zone) DO UPDATE SET unlocked = TRUE",
        {"uid": uid, "zone": zone}
    )
    await call.answer(f"üéâ –ó–æ–Ω–∞ ¬´{zone}¬ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!")
    await show_zones(uid, call)

# Quest progress checker (called periodically)
async def check_quest_progress(uid: int, message: Message = None):
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})
    eggs = json.loads(user.get("eggs") or "[]")
    pets = await fetch_all("SELECT * FROM pets WHERE user_id = $1", {"uid": uid})
    quests = await fetch_all(
        "SELECT * FROM quests WHERE user_id = $1 AND completed = FALSE", {"uid": uid}
    )
    for q in quests:
        new_progress = q['progress']
        if q['name'] == "–°–æ–±–µ—Ä–∏ 3 —è–π—Ü–∞":
            new_progress = len(eggs)
        elif q['name'] == "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞":
            new_progress = 1 if pets else 0
        elif q['name'] == "–ü–µ—Ä–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —è–π—Ü–∞":
            new_progress = 1 if pets else 0
        if q['completed'] or q.get('claimed', False):
            continue
        if new_progress >= q['goal']:
            await execute_query(
                "UPDATE quests SET progress = $1, completed = TRUE WHERE id = $2",
                {"progress": q['goal'], "id": q['id']}
            )
            if message:
                await message.answer(
                    f"üèÜ <b>@{message.from_user.username or '—Ç—ã'} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–µ—Å—Ç ¬´{q['name']}¬ª!</b>\n"
                    f"üéÅ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è!"
                )
        elif new_progress != q['progress']:
            await execute_query(
                "UPDATE quests SET progress = $1 WHERE id = $2",
                {"progress": new_progress, "id": q['id']}
            )

# Zone unlock checker (called periodically)
async def check_zone_unlocks(uid: int, message: Message = None):
    user = await fetch_one("SELECT * FROM users WHERE user_id = $1", {"uid": uid})
    if not user:
        return
    unlocked_zones = await fetch_all(
        "SELECT zone FROM user_zones WHERE user_id = $1 AND unlocked = TRUE", {"uid": uid}
    )
    unlocked = {z['zone'] for z in unlocked_zones}
    all_zones = await fetch_all("SELECT * FROM zones")
    for zone in all_zones:
        name = zone['name']
        if name in unlocked:
            continue
        conds = json.loads(zone.get('unlock_conditions') or "{}")
        can_unlock = True
        if conds.get('hatched_count') and user.get('hatched_count', 0) < conds['hatched_count']:
            can_unlock = False
        if conds.get('coins') and user['coins'] < conds['coins']:
            can_unlock = False
        if conds.get('merge_count') and user.get('merged_count', 0) < conds['merge_count']:
            can_unlock = False
        if can_unlock:
            await execute_query(
                "INSERT INTO user_zones (user_id, zone, unlocked) VALUES ($1, $2, TRUE) "
                "ON CONFLICT (user_id, zone) DO UPDATE SET unlocked = TRUE",
                {"uid": uid, "zone": name}
            )
            if message:
                await message.answer(f"üåç –¢—ã –æ—Ç–∫—Ä—ã–ª –Ω–æ–≤—É—é –∑–æ–Ω—É: <b>{name}</b>!\nüìñ {zone['description']}")

# Get zone buff multiplier
async def get_zone_buff(user: dict) -> float:
    if not user.get('active_zone'):
        return 1.0
    zone = await fetch_one("SELECT * FROM zones WHERE name = $1", {"name": user['active_zone']})
    if zone and zone.get('buff_type') == 'coin_rate':
        return 1.0 + zone.get('buff_value', 0) / 100
    return 1.0